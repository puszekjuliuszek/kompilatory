Grammar:

Rule 0     S' -> program
Rule 1     program -> instructions_or_empty
Rule 2     instructions_or_empty -> <empty>
Rule 3     instructions_or_empty -> instructions
Rule 4     instructions -> instruction
Rule 5     instructions -> instructions instruction
Rule 6     instruction -> { instructions }
Rule 7     instruction -> print_i ;
Rule 8     instruction -> assign ;
Rule 9     instruction -> while_l
Rule 10    instruction -> for_l
Rule 11    instruction -> CONTINUE ;
Rule 12    instruction -> BREAK ;
Rule 13    instruction -> return_i ;
Rule 14    instruction -> if_i
Rule 15    expr -> mat_fun ( expr )
Rule 16    expr -> matrix
Rule 17    expr -> unary
Rule 18    expr -> expr OR expr  [precedence=left, level=4]
Rule 19    expr -> expr AND expr  [precedence=left, level=4]
Rule 20    expr -> expr XOR expr  [precedence=left, level=4]
Rule 21    expr -> expr DOTSUB expr  [precedence=left, level=5]
Rule 22    expr -> expr DOTADD expr  [precedence=left, level=5]
Rule 23    expr -> expr DOTDIV expr  [precedence=left, level=6]
Rule 24    expr -> expr DOTMUL expr  [precedence=left, level=6]
Rule 25    expr -> expr LESSEREQUAL expr  [precedence=nonassoc, level=3]
Rule 26    expr -> expr GREATEREQUAL expr  [precedence=nonassoc, level=3]
Rule 27    expr -> expr LESSER expr  [precedence=nonassoc, level=3]
Rule 28    expr -> expr GREATER expr  [precedence=nonassoc, level=3]
Rule 29    expr -> expr NOTEQUAL expr  [precedence=nonassoc, level=3]
Rule 30    expr -> expr EQUAL expr  [precedence=nonassoc, level=3]
Rule 31    expr -> expr / expr  [precedence=left, level=6]
Rule 32    expr -> expr * expr  [precedence=left, level=6]
Rule 33    expr -> expr - expr  [precedence=left, level=5]
Rule 34    expr -> expr + expr  [precedence=left, level=5]
Rule 35    expr -> ( expr )
Rule 36    expr -> var
Rule 37    expr -> FLOATNUM
Rule 38    expr -> INTNUM
Rule 39    expr -> STRING
Rule 40    var -> ID
Rule 41    var -> matel
Rule 42    matel -> ID [ expr , expr ]
Rule 43    assign -> var DIVASSIGN expr
Rule 44    assign -> var MULASSIGN expr
Rule 45    assign -> var SUBASSIGN expr
Rule 46    assign -> var ADDASSIGN expr
Rule 47    assign -> var = expr
Rule 48    unary -> NOT expr  [precedence=right, level=7]
Rule 49    unary -> - expr  [precedence=right, level=7]
Rule 50    matrix -> [ vectors ]
Rule 51    vectors -> vector
Rule 52    vectors -> vectors , vector
Rule 53    vector -> ID [ expr : ]
Rule 54    vector -> ID [ : expr ]
Rule 55    vector -> ID [ expr : expr ]
Rule 56    vector -> ID [ expr ]
Rule 57    vector -> [ variables ]
Rule 58    variables -> variable
Rule 59    variables -> variables , variable
Rule 60    variable -> expr
Rule 61    mat_fun -> ONES
Rule 62    mat_fun -> EYE
Rule 63    mat_fun -> ZEROS
Rule 64    if_i -> IF ( expr ) instruction ELSE instruction  [precedence=right, level=2]
Rule 65    if_i -> IF ( expr ) instruction  [precedence=right, level=1]
Rule 66    while_l -> WHILE ( expr ) instruction
Rule 67    for_l -> FOR ID = expr : expr instruction
Rule 68    return_i -> RETURN expr
Rule 69    return_i -> RETURN
Rule 70    print_i -> PRINT printargs
Rule 71    printargs -> expr
Rule 72    printargs -> expr , printargs

Terminals, with rules where they appear:

(                    : 15 35 64 65 66
)                    : 15 35 64 65 66
*                    : 32
+                    : 34
,                    : 42 52 59 72
-                    : 33 49
/                    : 31
:                    : 53 54 55 67
;                    : 7 8 11 12 13
=                    : 47 67
ADDASSIGN            : 46
AND                  : 19
BREAK                : 12
CONTINUE             : 11
DIVASSIGN            : 43
DOTADD               : 22
DOTDIV               : 23
DOTMUL               : 24
DOTSUB               : 21
ELSE                 : 64
EQUAL                : 30
EYE                  : 62
FLOATNUM             : 37
FOR                  : 67
GREATER              : 28
GREATEREQUAL         : 26
ID                   : 40 42 53 54 55 56 67
IF                   : 64 65
INTNUM               : 38
LESSER               : 27
LESSEREQUAL          : 25
MULASSIGN            : 44
NOT                  : 48
NOTEQUAL             : 29
ONES                 : 61
OR                   : 18
PRINT                : 70
RETURN               : 68 69
STRING               : 39
SUBASSIGN            : 45
WHILE                : 66
XOR                  : 20
ZEROS                : 63
[                    : 42 50 53 54 55 56 57
]                    : 42 50 53 54 55 56 57
error                : 
{                    : 6
}                    : 6

Nonterminals, with rules where they appear:

assign               : 8
expr                 : 15 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 42 42 43 44 45 46 47 48 49 53 54 55 55 56 60 64 65 66 67 67 68 71 72
for_l                : 10
if_i                 : 14
instruction          : 4 5 64 64 65 66 67
instructions         : 3 5 6
instructions_or_empty : 1
mat_fun              : 15
matel                : 41
matrix               : 16
print_i              : 7
printargs            : 70 72
program              : 0
return_i             : 13
unary                : 17
var                  : 36 43 44 45 46 47
variable             : 58 59
variables            : 57 59
vector               : 51 52
vectors              : 50 52
while_l              : 9


state 0

    (0) S' -> . program
    (1) program -> . instructions_or_empty
    (2) instructions_or_empty -> .
    (3) instructions_or_empty -> . instructions
    (4) instructions -> . instruction
    (5) instructions -> . instructions instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . print_i ;
    (8) instruction -> . assign ;
    (9) instruction -> . while_l
    (10) instruction -> . for_l
    (11) instruction -> . CONTINUE ;
    (12) instruction -> . BREAK ;
    (13) instruction -> . return_i ;
    (14) instruction -> . if_i
    (70) print_i -> . PRINT printargs
    (43) assign -> . var DIVASSIGN expr
    (44) assign -> . var MULASSIGN expr
    (45) assign -> . var SUBASSIGN expr
    (46) assign -> . var ADDASSIGN expr
    (47) assign -> . var = expr
    (66) while_l -> . WHILE ( expr ) instruction
    (67) for_l -> . FOR ID = expr : expr instruction
    (68) return_i -> . RETURN expr
    (69) return_i -> . RETURN
    (64) if_i -> . IF ( expr ) instruction ELSE instruction
    (65) if_i -> . IF ( expr ) instruction
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    $end            reduce using rule 2 (instructions_or_empty -> .)
    {               shift and go to state 5
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    PRINT           shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    RETURN          shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 18

    program                        shift and go to state 1
    instructions_or_empty          shift and go to state 2
    instructions                   shift and go to state 3
    instruction                    shift and go to state 4
    print_i                        shift and go to state 6
    assign                         shift and go to state 7
    while_l                        shift and go to state 8
    for_l                          shift and go to state 9
    return_i                       shift and go to state 12
    if_i                           shift and go to state 13
    var                            shift and go to state 15
    matel                          shift and go to state 21

state 1

    (0) S' -> program .


state 2

    (1) program -> instructions_or_empty .
    $end            reduce using rule 1 (program -> instructions_or_empty .)


state 3

    (3) instructions_or_empty -> instructions .
    (5) instructions -> instructions . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . print_i ;
    (8) instruction -> . assign ;
    (9) instruction -> . while_l
    (10) instruction -> . for_l
    (11) instruction -> . CONTINUE ;
    (12) instruction -> . BREAK ;
    (13) instruction -> . return_i ;
    (14) instruction -> . if_i
    (70) print_i -> . PRINT printargs
    (43) assign -> . var DIVASSIGN expr
    (44) assign -> . var MULASSIGN expr
    (45) assign -> . var SUBASSIGN expr
    (46) assign -> . var ADDASSIGN expr
    (47) assign -> . var = expr
    (66) while_l -> . WHILE ( expr ) instruction
    (67) for_l -> . FOR ID = expr : expr instruction
    (68) return_i -> . RETURN expr
    (69) return_i -> . RETURN
    (64) if_i -> . IF ( expr ) instruction ELSE instruction
    (65) if_i -> . IF ( expr ) instruction
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    $end            reduce using rule 3 (instructions_or_empty -> instructions .)
    {               shift and go to state 5
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    PRINT           shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    RETURN          shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 18

    instruction                    shift and go to state 22
    print_i                        shift and go to state 6
    assign                         shift and go to state 7
    while_l                        shift and go to state 8
    for_l                          shift and go to state 9
    return_i                       shift and go to state 12
    if_i                           shift and go to state 13
    var                            shift and go to state 15
    matel                          shift and go to state 21

state 4

    (4) instructions -> instruction .
    {               reduce using rule 4 (instructions -> instruction .)
    CONTINUE        reduce using rule 4 (instructions -> instruction .)
    BREAK           reduce using rule 4 (instructions -> instruction .)
    PRINT           reduce using rule 4 (instructions -> instruction .)
    WHILE           reduce using rule 4 (instructions -> instruction .)
    FOR             reduce using rule 4 (instructions -> instruction .)
    RETURN          reduce using rule 4 (instructions -> instruction .)
    IF              reduce using rule 4 (instructions -> instruction .)
    ID              reduce using rule 4 (instructions -> instruction .)
    $end            reduce using rule 4 (instructions -> instruction .)
    }               reduce using rule 4 (instructions -> instruction .)


state 5

    (6) instruction -> { . instructions }
    (4) instructions -> . instruction
    (5) instructions -> . instructions instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . print_i ;
    (8) instruction -> . assign ;
    (9) instruction -> . while_l
    (10) instruction -> . for_l
    (11) instruction -> . CONTINUE ;
    (12) instruction -> . BREAK ;
    (13) instruction -> . return_i ;
    (14) instruction -> . if_i
    (70) print_i -> . PRINT printargs
    (43) assign -> . var DIVASSIGN expr
    (44) assign -> . var MULASSIGN expr
    (45) assign -> . var SUBASSIGN expr
    (46) assign -> . var ADDASSIGN expr
    (47) assign -> . var = expr
    (66) while_l -> . WHILE ( expr ) instruction
    (67) for_l -> . FOR ID = expr : expr instruction
    (68) return_i -> . RETURN expr
    (69) return_i -> . RETURN
    (64) if_i -> . IF ( expr ) instruction ELSE instruction
    (65) if_i -> . IF ( expr ) instruction
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    {               shift and go to state 5
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    PRINT           shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    RETURN          shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 18

    instructions                   shift and go to state 23
    instruction                    shift and go to state 4
    print_i                        shift and go to state 6
    assign                         shift and go to state 7
    while_l                        shift and go to state 8
    for_l                          shift and go to state 9
    return_i                       shift and go to state 12
    if_i                           shift and go to state 13
    var                            shift and go to state 15
    matel                          shift and go to state 21

state 6

    (7) instruction -> print_i . ;
    ;               shift and go to state 24


state 7

    (8) instruction -> assign . ;
    ;               shift and go to state 25


state 8

    (9) instruction -> while_l .
    {               reduce using rule 9 (instruction -> while_l .)
    CONTINUE        reduce using rule 9 (instruction -> while_l .)
    BREAK           reduce using rule 9 (instruction -> while_l .)
    PRINT           reduce using rule 9 (instruction -> while_l .)
    WHILE           reduce using rule 9 (instruction -> while_l .)
    FOR             reduce using rule 9 (instruction -> while_l .)
    RETURN          reduce using rule 9 (instruction -> while_l .)
    IF              reduce using rule 9 (instruction -> while_l .)
    ID              reduce using rule 9 (instruction -> while_l .)
    $end            reduce using rule 9 (instruction -> while_l .)
    }               reduce using rule 9 (instruction -> while_l .)
    ELSE            reduce using rule 9 (instruction -> while_l .)


state 9

    (10) instruction -> for_l .
    {               reduce using rule 10 (instruction -> for_l .)
    CONTINUE        reduce using rule 10 (instruction -> for_l .)
    BREAK           reduce using rule 10 (instruction -> for_l .)
    PRINT           reduce using rule 10 (instruction -> for_l .)
    WHILE           reduce using rule 10 (instruction -> for_l .)
    FOR             reduce using rule 10 (instruction -> for_l .)
    RETURN          reduce using rule 10 (instruction -> for_l .)
    IF              reduce using rule 10 (instruction -> for_l .)
    ID              reduce using rule 10 (instruction -> for_l .)
    $end            reduce using rule 10 (instruction -> for_l .)
    }               reduce using rule 10 (instruction -> for_l .)
    ELSE            reduce using rule 10 (instruction -> for_l .)


state 10

    (11) instruction -> CONTINUE . ;
    ;               shift and go to state 26


state 11

    (12) instruction -> BREAK . ;
    ;               shift and go to state 27


state 12

    (13) instruction -> return_i . ;
    ;               shift and go to state 28


state 13

    (14) instruction -> if_i .
    {               reduce using rule 14 (instruction -> if_i .)
    CONTINUE        reduce using rule 14 (instruction -> if_i .)
    BREAK           reduce using rule 14 (instruction -> if_i .)
    PRINT           reduce using rule 14 (instruction -> if_i .)
    WHILE           reduce using rule 14 (instruction -> if_i .)
    FOR             reduce using rule 14 (instruction -> if_i .)
    RETURN          reduce using rule 14 (instruction -> if_i .)
    IF              reduce using rule 14 (instruction -> if_i .)
    ID              reduce using rule 14 (instruction -> if_i .)
    $end            reduce using rule 14 (instruction -> if_i .)
    }               reduce using rule 14 (instruction -> if_i .)
    ELSE            reduce using rule 14 (instruction -> if_i .)


state 14

    (70) print_i -> PRINT . printargs
    (71) printargs -> . expr
    (72) printargs -> . expr , printargs
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    printargs                      shift and go to state 29
    expr                           shift and go to state 30
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 15

    (43) assign -> var . DIVASSIGN expr
    (44) assign -> var . MULASSIGN expr
    (45) assign -> var . SUBASSIGN expr
    (46) assign -> var . ADDASSIGN expr
    (47) assign -> var . = expr
    DIVASSIGN       shift and go to state 45
    MULASSIGN       shift and go to state 46
    SUBASSIGN       shift and go to state 47
    ADDASSIGN       shift and go to state 48
    =               shift and go to state 49


state 16

    (66) while_l -> WHILE . ( expr ) instruction
    (               shift and go to state 50


state 17

    (67) for_l -> FOR . ID = expr : expr instruction
    ID              shift and go to state 51


state 18

    (40) var -> ID .
    (42) matel -> ID . [ expr , expr ]
    DIVASSIGN       reduce using rule 40 (var -> ID .)
    MULASSIGN       reduce using rule 40 (var -> ID .)
    SUBASSIGN       reduce using rule 40 (var -> ID .)
    ADDASSIGN       reduce using rule 40 (var -> ID .)
    =               reduce using rule 40 (var -> ID .)
    ,               reduce using rule 40 (var -> ID .)
    OR              reduce using rule 40 (var -> ID .)
    AND             reduce using rule 40 (var -> ID .)
    XOR             reduce using rule 40 (var -> ID .)
    DOTSUB          reduce using rule 40 (var -> ID .)
    DOTADD          reduce using rule 40 (var -> ID .)
    DOTDIV          reduce using rule 40 (var -> ID .)
    DOTMUL          reduce using rule 40 (var -> ID .)
    LESSEREQUAL     reduce using rule 40 (var -> ID .)
    GREATEREQUAL    reduce using rule 40 (var -> ID .)
    LESSER          reduce using rule 40 (var -> ID .)
    GREATER         reduce using rule 40 (var -> ID .)
    NOTEQUAL        reduce using rule 40 (var -> ID .)
    EQUAL           reduce using rule 40 (var -> ID .)
    /               reduce using rule 40 (var -> ID .)
    *               reduce using rule 40 (var -> ID .)
    -               reduce using rule 40 (var -> ID .)
    +               reduce using rule 40 (var -> ID .)
    ;               reduce using rule 40 (var -> ID .)
    )               reduce using rule 40 (var -> ID .)
    ]               reduce using rule 40 (var -> ID .)
    :               reduce using rule 40 (var -> ID .)
    {               reduce using rule 40 (var -> ID .)
    CONTINUE        reduce using rule 40 (var -> ID .)
    BREAK           reduce using rule 40 (var -> ID .)
    PRINT           reduce using rule 40 (var -> ID .)
    WHILE           reduce using rule 40 (var -> ID .)
    FOR             reduce using rule 40 (var -> ID .)
    RETURN          reduce using rule 40 (var -> ID .)
    IF              reduce using rule 40 (var -> ID .)
    ID              reduce using rule 40 (var -> ID .)
    [               shift and go to state 52


state 19

    (68) return_i -> RETURN . expr
    (69) return_i -> RETURN .
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    ;               reduce using rule 69 (return_i -> RETURN .)
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 53
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 20

    (64) if_i -> IF . ( expr ) instruction ELSE instruction
    (65) if_i -> IF . ( expr ) instruction
    (               shift and go to state 54


state 21

    (41) var -> matel .
    DIVASSIGN       reduce using rule 41 (var -> matel .)
    MULASSIGN       reduce using rule 41 (var -> matel .)
    SUBASSIGN       reduce using rule 41 (var -> matel .)
    ADDASSIGN       reduce using rule 41 (var -> matel .)
    =               reduce using rule 41 (var -> matel .)
    ,               reduce using rule 41 (var -> matel .)
    OR              reduce using rule 41 (var -> matel .)
    AND             reduce using rule 41 (var -> matel .)
    XOR             reduce using rule 41 (var -> matel .)
    DOTSUB          reduce using rule 41 (var -> matel .)
    DOTADD          reduce using rule 41 (var -> matel .)
    DOTDIV          reduce using rule 41 (var -> matel .)
    DOTMUL          reduce using rule 41 (var -> matel .)
    LESSEREQUAL     reduce using rule 41 (var -> matel .)
    GREATEREQUAL    reduce using rule 41 (var -> matel .)
    LESSER          reduce using rule 41 (var -> matel .)
    GREATER         reduce using rule 41 (var -> matel .)
    NOTEQUAL        reduce using rule 41 (var -> matel .)
    EQUAL           reduce using rule 41 (var -> matel .)
    /               reduce using rule 41 (var -> matel .)
    *               reduce using rule 41 (var -> matel .)
    -               reduce using rule 41 (var -> matel .)
    +               reduce using rule 41 (var -> matel .)
    ;               reduce using rule 41 (var -> matel .)
    )               reduce using rule 41 (var -> matel .)
    ]               reduce using rule 41 (var -> matel .)
    :               reduce using rule 41 (var -> matel .)
    {               reduce using rule 41 (var -> matel .)
    CONTINUE        reduce using rule 41 (var -> matel .)
    BREAK           reduce using rule 41 (var -> matel .)
    PRINT           reduce using rule 41 (var -> matel .)
    WHILE           reduce using rule 41 (var -> matel .)
    FOR             reduce using rule 41 (var -> matel .)
    RETURN          reduce using rule 41 (var -> matel .)
    IF              reduce using rule 41 (var -> matel .)
    ID              reduce using rule 41 (var -> matel .)


state 22

    (5) instructions -> instructions instruction .
    {               reduce using rule 5 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 5 (instructions -> instructions instruction .)
    BREAK           reduce using rule 5 (instructions -> instructions instruction .)
    PRINT           reduce using rule 5 (instructions -> instructions instruction .)
    WHILE           reduce using rule 5 (instructions -> instructions instruction .)
    FOR             reduce using rule 5 (instructions -> instructions instruction .)
    RETURN          reduce using rule 5 (instructions -> instructions instruction .)
    IF              reduce using rule 5 (instructions -> instructions instruction .)
    ID              reduce using rule 5 (instructions -> instructions instruction .)
    $end            reduce using rule 5 (instructions -> instructions instruction .)
    }               reduce using rule 5 (instructions -> instructions instruction .)


state 23

    (6) instruction -> { instructions . }
    (5) instructions -> instructions . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . print_i ;
    (8) instruction -> . assign ;
    (9) instruction -> . while_l
    (10) instruction -> . for_l
    (11) instruction -> . CONTINUE ;
    (12) instruction -> . BREAK ;
    (13) instruction -> . return_i ;
    (14) instruction -> . if_i
    (70) print_i -> . PRINT printargs
    (43) assign -> . var DIVASSIGN expr
    (44) assign -> . var MULASSIGN expr
    (45) assign -> . var SUBASSIGN expr
    (46) assign -> . var ADDASSIGN expr
    (47) assign -> . var = expr
    (66) while_l -> . WHILE ( expr ) instruction
    (67) for_l -> . FOR ID = expr : expr instruction
    (68) return_i -> . RETURN expr
    (69) return_i -> . RETURN
    (64) if_i -> . IF ( expr ) instruction ELSE instruction
    (65) if_i -> . IF ( expr ) instruction
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    }               shift and go to state 55
    {               shift and go to state 5
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    PRINT           shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    RETURN          shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 18

    instruction                    shift and go to state 22
    print_i                        shift and go to state 6
    assign                         shift and go to state 7
    while_l                        shift and go to state 8
    for_l                          shift and go to state 9
    return_i                       shift and go to state 12
    if_i                           shift and go to state 13
    var                            shift and go to state 15
    matel                          shift and go to state 21

state 24

    (7) instruction -> print_i ; .
    {               reduce using rule 7 (instruction -> print_i ; .)
    CONTINUE        reduce using rule 7 (instruction -> print_i ; .)
    BREAK           reduce using rule 7 (instruction -> print_i ; .)
    PRINT           reduce using rule 7 (instruction -> print_i ; .)
    WHILE           reduce using rule 7 (instruction -> print_i ; .)
    FOR             reduce using rule 7 (instruction -> print_i ; .)
    RETURN          reduce using rule 7 (instruction -> print_i ; .)
    IF              reduce using rule 7 (instruction -> print_i ; .)
    ID              reduce using rule 7 (instruction -> print_i ; .)
    $end            reduce using rule 7 (instruction -> print_i ; .)
    }               reduce using rule 7 (instruction -> print_i ; .)
    ELSE            reduce using rule 7 (instruction -> print_i ; .)


state 25

    (8) instruction -> assign ; .
    {               reduce using rule 8 (instruction -> assign ; .)
    CONTINUE        reduce using rule 8 (instruction -> assign ; .)
    BREAK           reduce using rule 8 (instruction -> assign ; .)
    PRINT           reduce using rule 8 (instruction -> assign ; .)
    WHILE           reduce using rule 8 (instruction -> assign ; .)
    FOR             reduce using rule 8 (instruction -> assign ; .)
    RETURN          reduce using rule 8 (instruction -> assign ; .)
    IF              reduce using rule 8 (instruction -> assign ; .)
    ID              reduce using rule 8 (instruction -> assign ; .)
    $end            reduce using rule 8 (instruction -> assign ; .)
    }               reduce using rule 8 (instruction -> assign ; .)
    ELSE            reduce using rule 8 (instruction -> assign ; .)


state 26

    (11) instruction -> CONTINUE ; .
    {               reduce using rule 11 (instruction -> CONTINUE ; .)
    CONTINUE        reduce using rule 11 (instruction -> CONTINUE ; .)
    BREAK           reduce using rule 11 (instruction -> CONTINUE ; .)
    PRINT           reduce using rule 11 (instruction -> CONTINUE ; .)
    WHILE           reduce using rule 11 (instruction -> CONTINUE ; .)
    FOR             reduce using rule 11 (instruction -> CONTINUE ; .)
    RETURN          reduce using rule 11 (instruction -> CONTINUE ; .)
    IF              reduce using rule 11 (instruction -> CONTINUE ; .)
    ID              reduce using rule 11 (instruction -> CONTINUE ; .)
    $end            reduce using rule 11 (instruction -> CONTINUE ; .)
    }               reduce using rule 11 (instruction -> CONTINUE ; .)
    ELSE            reduce using rule 11 (instruction -> CONTINUE ; .)


state 27

    (12) instruction -> BREAK ; .
    {               reduce using rule 12 (instruction -> BREAK ; .)
    CONTINUE        reduce using rule 12 (instruction -> BREAK ; .)
    BREAK           reduce using rule 12 (instruction -> BREAK ; .)
    PRINT           reduce using rule 12 (instruction -> BREAK ; .)
    WHILE           reduce using rule 12 (instruction -> BREAK ; .)
    FOR             reduce using rule 12 (instruction -> BREAK ; .)
    RETURN          reduce using rule 12 (instruction -> BREAK ; .)
    IF              reduce using rule 12 (instruction -> BREAK ; .)
    ID              reduce using rule 12 (instruction -> BREAK ; .)
    $end            reduce using rule 12 (instruction -> BREAK ; .)
    }               reduce using rule 12 (instruction -> BREAK ; .)
    ELSE            reduce using rule 12 (instruction -> BREAK ; .)


state 28

    (13) instruction -> return_i ; .
    {               reduce using rule 13 (instruction -> return_i ; .)
    CONTINUE        reduce using rule 13 (instruction -> return_i ; .)
    BREAK           reduce using rule 13 (instruction -> return_i ; .)
    PRINT           reduce using rule 13 (instruction -> return_i ; .)
    WHILE           reduce using rule 13 (instruction -> return_i ; .)
    FOR             reduce using rule 13 (instruction -> return_i ; .)
    RETURN          reduce using rule 13 (instruction -> return_i ; .)
    IF              reduce using rule 13 (instruction -> return_i ; .)
    ID              reduce using rule 13 (instruction -> return_i ; .)
    $end            reduce using rule 13 (instruction -> return_i ; .)
    }               reduce using rule 13 (instruction -> return_i ; .)
    ELSE            reduce using rule 13 (instruction -> return_i ; .)


state 29

    (70) print_i -> PRINT printargs .
    ;               reduce using rule 70 (print_i -> PRINT printargs .)


state 30

    (71) printargs -> expr .
    (72) printargs -> expr . , printargs
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ;               reduce using rule 71 (printargs -> expr .)
    ,               shift and go to state 56
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    LESSEREQUAL     shift and go to state 64
    GREATEREQUAL    shift and go to state 65
    LESSER          shift and go to state 66
    GREATER         shift and go to state 67
    NOTEQUAL        shift and go to state 68
    EQUAL           shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 31

    (15) expr -> mat_fun . ( expr )
    (               shift and go to state 74


state 32

    (35) expr -> ( . expr )
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 75
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 33

    (16) expr -> matrix .
    ,               reduce using rule 16 (expr -> matrix .)
    OR              reduce using rule 16 (expr -> matrix .)
    AND             reduce using rule 16 (expr -> matrix .)
    XOR             reduce using rule 16 (expr -> matrix .)
    DOTSUB          reduce using rule 16 (expr -> matrix .)
    DOTADD          reduce using rule 16 (expr -> matrix .)
    DOTDIV          reduce using rule 16 (expr -> matrix .)
    DOTMUL          reduce using rule 16 (expr -> matrix .)
    LESSEREQUAL     reduce using rule 16 (expr -> matrix .)
    GREATEREQUAL    reduce using rule 16 (expr -> matrix .)
    LESSER          reduce using rule 16 (expr -> matrix .)
    GREATER         reduce using rule 16 (expr -> matrix .)
    NOTEQUAL        reduce using rule 16 (expr -> matrix .)
    EQUAL           reduce using rule 16 (expr -> matrix .)
    /               reduce using rule 16 (expr -> matrix .)
    *               reduce using rule 16 (expr -> matrix .)
    -               reduce using rule 16 (expr -> matrix .)
    +               reduce using rule 16 (expr -> matrix .)
    ;               reduce using rule 16 (expr -> matrix .)
    )               reduce using rule 16 (expr -> matrix .)
    ]               reduce using rule 16 (expr -> matrix .)
    :               reduce using rule 16 (expr -> matrix .)
    {               reduce using rule 16 (expr -> matrix .)
    CONTINUE        reduce using rule 16 (expr -> matrix .)
    BREAK           reduce using rule 16 (expr -> matrix .)
    PRINT           reduce using rule 16 (expr -> matrix .)
    WHILE           reduce using rule 16 (expr -> matrix .)
    FOR             reduce using rule 16 (expr -> matrix .)
    RETURN          reduce using rule 16 (expr -> matrix .)
    IF              reduce using rule 16 (expr -> matrix .)
    ID              reduce using rule 16 (expr -> matrix .)


state 34

    (17) expr -> unary .
    ,               reduce using rule 17 (expr -> unary .)
    OR              reduce using rule 17 (expr -> unary .)
    AND             reduce using rule 17 (expr -> unary .)
    XOR             reduce using rule 17 (expr -> unary .)
    DOTSUB          reduce using rule 17 (expr -> unary .)
    DOTADD          reduce using rule 17 (expr -> unary .)
    DOTDIV          reduce using rule 17 (expr -> unary .)
    DOTMUL          reduce using rule 17 (expr -> unary .)
    LESSEREQUAL     reduce using rule 17 (expr -> unary .)
    GREATEREQUAL    reduce using rule 17 (expr -> unary .)
    LESSER          reduce using rule 17 (expr -> unary .)
    GREATER         reduce using rule 17 (expr -> unary .)
    NOTEQUAL        reduce using rule 17 (expr -> unary .)
    EQUAL           reduce using rule 17 (expr -> unary .)
    /               reduce using rule 17 (expr -> unary .)
    *               reduce using rule 17 (expr -> unary .)
    -               reduce using rule 17 (expr -> unary .)
    +               reduce using rule 17 (expr -> unary .)
    ;               reduce using rule 17 (expr -> unary .)
    )               reduce using rule 17 (expr -> unary .)
    ]               reduce using rule 17 (expr -> unary .)
    :               reduce using rule 17 (expr -> unary .)
    {               reduce using rule 17 (expr -> unary .)
    CONTINUE        reduce using rule 17 (expr -> unary .)
    BREAK           reduce using rule 17 (expr -> unary .)
    PRINT           reduce using rule 17 (expr -> unary .)
    WHILE           reduce using rule 17 (expr -> unary .)
    FOR             reduce using rule 17 (expr -> unary .)
    RETURN          reduce using rule 17 (expr -> unary .)
    IF              reduce using rule 17 (expr -> unary .)
    ID              reduce using rule 17 (expr -> unary .)


state 35

    (49) unary -> - . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 76
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 36

    (36) expr -> var .
    ,               reduce using rule 36 (expr -> var .)
    OR              reduce using rule 36 (expr -> var .)
    AND             reduce using rule 36 (expr -> var .)
    XOR             reduce using rule 36 (expr -> var .)
    DOTSUB          reduce using rule 36 (expr -> var .)
    DOTADD          reduce using rule 36 (expr -> var .)
    DOTDIV          reduce using rule 36 (expr -> var .)
    DOTMUL          reduce using rule 36 (expr -> var .)
    LESSEREQUAL     reduce using rule 36 (expr -> var .)
    GREATEREQUAL    reduce using rule 36 (expr -> var .)
    LESSER          reduce using rule 36 (expr -> var .)
    GREATER         reduce using rule 36 (expr -> var .)
    NOTEQUAL        reduce using rule 36 (expr -> var .)
    EQUAL           reduce using rule 36 (expr -> var .)
    /               reduce using rule 36 (expr -> var .)
    *               reduce using rule 36 (expr -> var .)
    -               reduce using rule 36 (expr -> var .)
    +               reduce using rule 36 (expr -> var .)
    ;               reduce using rule 36 (expr -> var .)
    )               reduce using rule 36 (expr -> var .)
    ]               reduce using rule 36 (expr -> var .)
    :               reduce using rule 36 (expr -> var .)
    {               reduce using rule 36 (expr -> var .)
    CONTINUE        reduce using rule 36 (expr -> var .)
    BREAK           reduce using rule 36 (expr -> var .)
    PRINT           reduce using rule 36 (expr -> var .)
    WHILE           reduce using rule 36 (expr -> var .)
    FOR             reduce using rule 36 (expr -> var .)
    RETURN          reduce using rule 36 (expr -> var .)
    IF              reduce using rule 36 (expr -> var .)
    ID              reduce using rule 36 (expr -> var .)


state 37

    (37) expr -> FLOATNUM .
    ,               reduce using rule 37 (expr -> FLOATNUM .)
    OR              reduce using rule 37 (expr -> FLOATNUM .)
    AND             reduce using rule 37 (expr -> FLOATNUM .)
    XOR             reduce using rule 37 (expr -> FLOATNUM .)
    DOTSUB          reduce using rule 37 (expr -> FLOATNUM .)
    DOTADD          reduce using rule 37 (expr -> FLOATNUM .)
    DOTDIV          reduce using rule 37 (expr -> FLOATNUM .)
    DOTMUL          reduce using rule 37 (expr -> FLOATNUM .)
    LESSEREQUAL     reduce using rule 37 (expr -> FLOATNUM .)
    GREATEREQUAL    reduce using rule 37 (expr -> FLOATNUM .)
    LESSER          reduce using rule 37 (expr -> FLOATNUM .)
    GREATER         reduce using rule 37 (expr -> FLOATNUM .)
    NOTEQUAL        reduce using rule 37 (expr -> FLOATNUM .)
    EQUAL           reduce using rule 37 (expr -> FLOATNUM .)
    /               reduce using rule 37 (expr -> FLOATNUM .)
    *               reduce using rule 37 (expr -> FLOATNUM .)
    -               reduce using rule 37 (expr -> FLOATNUM .)
    +               reduce using rule 37 (expr -> FLOATNUM .)
    ;               reduce using rule 37 (expr -> FLOATNUM .)
    )               reduce using rule 37 (expr -> FLOATNUM .)
    ]               reduce using rule 37 (expr -> FLOATNUM .)
    :               reduce using rule 37 (expr -> FLOATNUM .)
    {               reduce using rule 37 (expr -> FLOATNUM .)
    CONTINUE        reduce using rule 37 (expr -> FLOATNUM .)
    BREAK           reduce using rule 37 (expr -> FLOATNUM .)
    PRINT           reduce using rule 37 (expr -> FLOATNUM .)
    WHILE           reduce using rule 37 (expr -> FLOATNUM .)
    FOR             reduce using rule 37 (expr -> FLOATNUM .)
    RETURN          reduce using rule 37 (expr -> FLOATNUM .)
    IF              reduce using rule 37 (expr -> FLOATNUM .)
    ID              reduce using rule 37 (expr -> FLOATNUM .)


state 38

    (38) expr -> INTNUM .
    ,               reduce using rule 38 (expr -> INTNUM .)
    OR              reduce using rule 38 (expr -> INTNUM .)
    AND             reduce using rule 38 (expr -> INTNUM .)
    XOR             reduce using rule 38 (expr -> INTNUM .)
    DOTSUB          reduce using rule 38 (expr -> INTNUM .)
    DOTADD          reduce using rule 38 (expr -> INTNUM .)
    DOTDIV          reduce using rule 38 (expr -> INTNUM .)
    DOTMUL          reduce using rule 38 (expr -> INTNUM .)
    LESSEREQUAL     reduce using rule 38 (expr -> INTNUM .)
    GREATEREQUAL    reduce using rule 38 (expr -> INTNUM .)
    LESSER          reduce using rule 38 (expr -> INTNUM .)
    GREATER         reduce using rule 38 (expr -> INTNUM .)
    NOTEQUAL        reduce using rule 38 (expr -> INTNUM .)
    EQUAL           reduce using rule 38 (expr -> INTNUM .)
    /               reduce using rule 38 (expr -> INTNUM .)
    *               reduce using rule 38 (expr -> INTNUM .)
    -               reduce using rule 38 (expr -> INTNUM .)
    +               reduce using rule 38 (expr -> INTNUM .)
    ;               reduce using rule 38 (expr -> INTNUM .)
    )               reduce using rule 38 (expr -> INTNUM .)
    ]               reduce using rule 38 (expr -> INTNUM .)
    :               reduce using rule 38 (expr -> INTNUM .)
    {               reduce using rule 38 (expr -> INTNUM .)
    CONTINUE        reduce using rule 38 (expr -> INTNUM .)
    BREAK           reduce using rule 38 (expr -> INTNUM .)
    PRINT           reduce using rule 38 (expr -> INTNUM .)
    WHILE           reduce using rule 38 (expr -> INTNUM .)
    FOR             reduce using rule 38 (expr -> INTNUM .)
    RETURN          reduce using rule 38 (expr -> INTNUM .)
    IF              reduce using rule 38 (expr -> INTNUM .)
    ID              reduce using rule 38 (expr -> INTNUM .)


state 39

    (39) expr -> STRING .
    ,               reduce using rule 39 (expr -> STRING .)
    OR              reduce using rule 39 (expr -> STRING .)
    AND             reduce using rule 39 (expr -> STRING .)
    XOR             reduce using rule 39 (expr -> STRING .)
    DOTSUB          reduce using rule 39 (expr -> STRING .)
    DOTADD          reduce using rule 39 (expr -> STRING .)
    DOTDIV          reduce using rule 39 (expr -> STRING .)
    DOTMUL          reduce using rule 39 (expr -> STRING .)
    LESSEREQUAL     reduce using rule 39 (expr -> STRING .)
    GREATEREQUAL    reduce using rule 39 (expr -> STRING .)
    LESSER          reduce using rule 39 (expr -> STRING .)
    GREATER         reduce using rule 39 (expr -> STRING .)
    NOTEQUAL        reduce using rule 39 (expr -> STRING .)
    EQUAL           reduce using rule 39 (expr -> STRING .)
    /               reduce using rule 39 (expr -> STRING .)
    *               reduce using rule 39 (expr -> STRING .)
    -               reduce using rule 39 (expr -> STRING .)
    +               reduce using rule 39 (expr -> STRING .)
    ;               reduce using rule 39 (expr -> STRING .)
    )               reduce using rule 39 (expr -> STRING .)
    ]               reduce using rule 39 (expr -> STRING .)
    :               reduce using rule 39 (expr -> STRING .)
    {               reduce using rule 39 (expr -> STRING .)
    CONTINUE        reduce using rule 39 (expr -> STRING .)
    BREAK           reduce using rule 39 (expr -> STRING .)
    PRINT           reduce using rule 39 (expr -> STRING .)
    WHILE           reduce using rule 39 (expr -> STRING .)
    FOR             reduce using rule 39 (expr -> STRING .)
    RETURN          reduce using rule 39 (expr -> STRING .)
    IF              reduce using rule 39 (expr -> STRING .)
    ID              reduce using rule 39 (expr -> STRING .)


state 40

    (61) mat_fun -> ONES .
    (               reduce using rule 61 (mat_fun -> ONES .)


state 41

    (62) mat_fun -> EYE .
    (               reduce using rule 62 (mat_fun -> EYE .)


state 42

    (63) mat_fun -> ZEROS .
    (               reduce using rule 63 (mat_fun -> ZEROS .)


state 43

    (50) matrix -> [ . vectors ]
    (51) vectors -> . vector
    (52) vectors -> . vectors , vector
    (53) vector -> . ID [ expr : ]
    (54) vector -> . ID [ : expr ]
    (55) vector -> . ID [ expr : expr ]
    (56) vector -> . ID [ expr ]
    (57) vector -> . [ variables ]
    ID              shift and go to state 80
    [               shift and go to state 77

    vectors                        shift and go to state 78
    vector                         shift and go to state 79

state 44

    (48) unary -> NOT . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 81
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 45

    (43) assign -> var DIVASSIGN . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    var                            shift and go to state 36
    expr                           shift and go to state 82
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    matel                          shift and go to state 21

state 46

    (44) assign -> var MULASSIGN . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    var                            shift and go to state 36
    expr                           shift and go to state 83
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    matel                          shift and go to state 21

state 47

    (45) assign -> var SUBASSIGN . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    var                            shift and go to state 36
    expr                           shift and go to state 84
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    matel                          shift and go to state 21

state 48

    (46) assign -> var ADDASSIGN . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    var                            shift and go to state 36
    expr                           shift and go to state 85
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    matel                          shift and go to state 21

state 49

    (47) assign -> var = . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    var                            shift and go to state 36
    expr                           shift and go to state 86
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    matel                          shift and go to state 21

state 50

    (66) while_l -> WHILE ( . expr ) instruction
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 87
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 51

    (67) for_l -> FOR ID . = expr : expr instruction
    =               shift and go to state 88


state 52

    (42) matel -> ID [ . expr , expr ]
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 89
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 53

    (68) return_i -> RETURN expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ;               reduce using rule 68 (return_i -> RETURN expr .)
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    LESSEREQUAL     shift and go to state 64
    GREATEREQUAL    shift and go to state 65
    LESSER          shift and go to state 66
    GREATER         shift and go to state 67
    NOTEQUAL        shift and go to state 68
    EQUAL           shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 54

    (64) if_i -> IF ( . expr ) instruction ELSE instruction
    (65) if_i -> IF ( . expr ) instruction
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 90
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 55

    (6) instruction -> { instructions } .
    {               reduce using rule 6 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 6 (instruction -> { instructions } .)
    BREAK           reduce using rule 6 (instruction -> { instructions } .)
    PRINT           reduce using rule 6 (instruction -> { instructions } .)
    WHILE           reduce using rule 6 (instruction -> { instructions } .)
    FOR             reduce using rule 6 (instruction -> { instructions } .)
    RETURN          reduce using rule 6 (instruction -> { instructions } .)
    IF              reduce using rule 6 (instruction -> { instructions } .)
    ID              reduce using rule 6 (instruction -> { instructions } .)
    $end            reduce using rule 6 (instruction -> { instructions } .)
    }               reduce using rule 6 (instruction -> { instructions } .)
    ELSE            reduce using rule 6 (instruction -> { instructions } .)


state 56

    (72) printargs -> expr , . printargs
    (71) printargs -> . expr
    (72) printargs -> . expr , printargs
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 30
    printargs                      shift and go to state 91
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 57

    (18) expr -> expr OR . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 92
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 58

    (19) expr -> expr AND . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 93
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 59

    (20) expr -> expr XOR . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 94
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 60

    (21) expr -> expr DOTSUB . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 95
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 61

    (22) expr -> expr DOTADD . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 96
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 62

    (23) expr -> expr DOTDIV . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 97
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 63

    (24) expr -> expr DOTMUL . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 98
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 64

    (25) expr -> expr LESSEREQUAL . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 99
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 65

    (26) expr -> expr GREATEREQUAL . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 100
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 66

    (27) expr -> expr LESSER . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 101
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 67

    (28) expr -> expr GREATER . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 102
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 68

    (29) expr -> expr NOTEQUAL . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 103
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 69

    (30) expr -> expr EQUAL . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 104
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 70

    (31) expr -> expr / . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 105
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 71

    (32) expr -> expr * . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 106
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 72

    (33) expr -> expr - . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 107
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 73

    (34) expr -> expr + . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 108
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 74

    (15) expr -> mat_fun ( . expr )
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    mat_fun                        shift and go to state 31
    expr                           shift and go to state 109
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 75

    (35) expr -> ( expr . )
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    )               shift and go to state 110
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    LESSEREQUAL     shift and go to state 64
    GREATEREQUAL    shift and go to state 65
    LESSER          shift and go to state 66
    GREATER         shift and go to state 67
    NOTEQUAL        shift and go to state 68
    EQUAL           shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 76

    (49) unary -> - expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ,               reduce using rule 49 (unary -> - expr .)
    OR              reduce using rule 49 (unary -> - expr .)
    AND             reduce using rule 49 (unary -> - expr .)
    XOR             reduce using rule 49 (unary -> - expr .)
    DOTSUB          reduce using rule 49 (unary -> - expr .)
    DOTADD          reduce using rule 49 (unary -> - expr .)
    DOTDIV          reduce using rule 49 (unary -> - expr .)
    DOTMUL          reduce using rule 49 (unary -> - expr .)
    LESSEREQUAL     reduce using rule 49 (unary -> - expr .)
    GREATEREQUAL    reduce using rule 49 (unary -> - expr .)
    LESSER          reduce using rule 49 (unary -> - expr .)
    GREATER         reduce using rule 49 (unary -> - expr .)
    NOTEQUAL        reduce using rule 49 (unary -> - expr .)
    EQUAL           reduce using rule 49 (unary -> - expr .)
    /               reduce using rule 49 (unary -> - expr .)
    *               reduce using rule 49 (unary -> - expr .)
    -               reduce using rule 49 (unary -> - expr .)
    +               reduce using rule 49 (unary -> - expr .)
    ;               reduce using rule 49 (unary -> - expr .)
    )               reduce using rule 49 (unary -> - expr .)
    ]               reduce using rule 49 (unary -> - expr .)
    :               reduce using rule 49 (unary -> - expr .)
    {               reduce using rule 49 (unary -> - expr .)
    CONTINUE        reduce using rule 49 (unary -> - expr .)
    BREAK           reduce using rule 49 (unary -> - expr .)
    PRINT           reduce using rule 49 (unary -> - expr .)
    WHILE           reduce using rule 49 (unary -> - expr .)
    FOR             reduce using rule 49 (unary -> - expr .)
    RETURN          reduce using rule 49 (unary -> - expr .)
    IF              reduce using rule 49 (unary -> - expr .)
    ID              reduce using rule 49 (unary -> - expr .)


state 77

    (57) vector -> [ . variables ]
    (58) variables -> . variable
    (59) variables -> . variables , variable
    (60) variable -> . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    variables                      shift and go to state 111
    variable                       shift and go to state 112
    expr                           shift and go to state 113
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 78

    (50) matrix -> [ vectors . ]
    (52) vectors -> vectors . , vector
    ]               shift and go to state 114
    ,               shift and go to state 115


state 79

    (51) vectors -> vector .
    ]               reduce using rule 51 (vectors -> vector .)
    ,               reduce using rule 51 (vectors -> vector .)


state 80

    (53) vector -> ID . [ expr : ]
    (54) vector -> ID . [ : expr ]
    (55) vector -> ID . [ expr : expr ]
    (56) vector -> ID . [ expr ]
    [               shift and go to state 116


state 81

    (48) unary -> NOT expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ,               reduce using rule 48 (unary -> NOT expr .)
    OR              reduce using rule 48 (unary -> NOT expr .)
    AND             reduce using rule 48 (unary -> NOT expr .)
    XOR             reduce using rule 48 (unary -> NOT expr .)
    DOTSUB          reduce using rule 48 (unary -> NOT expr .)
    DOTADD          reduce using rule 48 (unary -> NOT expr .)
    DOTDIV          reduce using rule 48 (unary -> NOT expr .)
    DOTMUL          reduce using rule 48 (unary -> NOT expr .)
    LESSEREQUAL     reduce using rule 48 (unary -> NOT expr .)
    GREATEREQUAL    reduce using rule 48 (unary -> NOT expr .)
    LESSER          reduce using rule 48 (unary -> NOT expr .)
    GREATER         reduce using rule 48 (unary -> NOT expr .)
    NOTEQUAL        reduce using rule 48 (unary -> NOT expr .)
    EQUAL           reduce using rule 48 (unary -> NOT expr .)
    /               reduce using rule 48 (unary -> NOT expr .)
    *               reduce using rule 48 (unary -> NOT expr .)
    -               reduce using rule 48 (unary -> NOT expr .)
    +               reduce using rule 48 (unary -> NOT expr .)
    ;               reduce using rule 48 (unary -> NOT expr .)
    )               reduce using rule 48 (unary -> NOT expr .)
    ]               reduce using rule 48 (unary -> NOT expr .)
    :               reduce using rule 48 (unary -> NOT expr .)
    {               reduce using rule 48 (unary -> NOT expr .)
    CONTINUE        reduce using rule 48 (unary -> NOT expr .)
    BREAK           reduce using rule 48 (unary -> NOT expr .)
    PRINT           reduce using rule 48 (unary -> NOT expr .)
    WHILE           reduce using rule 48 (unary -> NOT expr .)
    FOR             reduce using rule 48 (unary -> NOT expr .)
    RETURN          reduce using rule 48 (unary -> NOT expr .)
    IF              reduce using rule 48 (unary -> NOT expr .)
    ID              reduce using rule 48 (unary -> NOT expr .)


state 82

    (43) assign -> var DIVASSIGN expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ;               reduce using rule 43 (assign -> var DIVASSIGN expr .)
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    LESSEREQUAL     shift and go to state 64
    GREATEREQUAL    shift and go to state 65
    LESSER          shift and go to state 66
    GREATER         shift and go to state 67
    NOTEQUAL        shift and go to state 68
    EQUAL           shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 83

    (44) assign -> var MULASSIGN expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ;               reduce using rule 44 (assign -> var MULASSIGN expr .)
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    LESSEREQUAL     shift and go to state 64
    GREATEREQUAL    shift and go to state 65
    LESSER          shift and go to state 66
    GREATER         shift and go to state 67
    NOTEQUAL        shift and go to state 68
    EQUAL           shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 84

    (45) assign -> var SUBASSIGN expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ;               reduce using rule 45 (assign -> var SUBASSIGN expr .)
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    LESSEREQUAL     shift and go to state 64
    GREATEREQUAL    shift and go to state 65
    LESSER          shift and go to state 66
    GREATER         shift and go to state 67
    NOTEQUAL        shift and go to state 68
    EQUAL           shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 85

    (46) assign -> var ADDASSIGN expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ;               reduce using rule 46 (assign -> var ADDASSIGN expr .)
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    LESSEREQUAL     shift and go to state 64
    GREATEREQUAL    shift and go to state 65
    LESSER          shift and go to state 66
    GREATER         shift and go to state 67
    NOTEQUAL        shift and go to state 68
    EQUAL           shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 86

    (47) assign -> var = expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ;               reduce using rule 47 (assign -> var = expr .)
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    LESSEREQUAL     shift and go to state 64
    GREATEREQUAL    shift and go to state 65
    LESSER          shift and go to state 66
    GREATER         shift and go to state 67
    NOTEQUAL        shift and go to state 68
    EQUAL           shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 87

    (66) while_l -> WHILE ( expr . ) instruction
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    )               shift and go to state 117
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    LESSEREQUAL     shift and go to state 64
    GREATEREQUAL    shift and go to state 65
    LESSER          shift and go to state 66
    GREATER         shift and go to state 67
    NOTEQUAL        shift and go to state 68
    EQUAL           shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 88

    (67) for_l -> FOR ID = . expr : expr instruction
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 118
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 89

    (42) matel -> ID [ expr . , expr ]
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ,               shift and go to state 119
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    LESSEREQUAL     shift and go to state 64
    GREATEREQUAL    shift and go to state 65
    LESSER          shift and go to state 66
    GREATER         shift and go to state 67
    NOTEQUAL        shift and go to state 68
    EQUAL           shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 90

    (64) if_i -> IF ( expr . ) instruction ELSE instruction
    (65) if_i -> IF ( expr . ) instruction
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    )               shift and go to state 120
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    LESSEREQUAL     shift and go to state 64
    GREATEREQUAL    shift and go to state 65
    LESSER          shift and go to state 66
    GREATER         shift and go to state 67
    NOTEQUAL        shift and go to state 68
    EQUAL           shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 91

    (72) printargs -> expr , printargs .
    ;               reduce using rule 72 (printargs -> expr , printargs .)


state 92

    (18) expr -> expr OR expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ,               reduce using rule 18 (expr -> expr OR expr .)
    OR              reduce using rule 18 (expr -> expr OR expr .)
    AND             reduce using rule 18 (expr -> expr OR expr .)
    XOR             reduce using rule 18 (expr -> expr OR expr .)
    LESSEREQUAL     reduce using rule 18 (expr -> expr OR expr .)
    GREATEREQUAL    reduce using rule 18 (expr -> expr OR expr .)
    LESSER          reduce using rule 18 (expr -> expr OR expr .)
    GREATER         reduce using rule 18 (expr -> expr OR expr .)
    NOTEQUAL        reduce using rule 18 (expr -> expr OR expr .)
    EQUAL           reduce using rule 18 (expr -> expr OR expr .)
    ;               reduce using rule 18 (expr -> expr OR expr .)
    )               reduce using rule 18 (expr -> expr OR expr .)
    ]               reduce using rule 18 (expr -> expr OR expr .)
    :               reduce using rule 18 (expr -> expr OR expr .)
    {               reduce using rule 18 (expr -> expr OR expr .)
    CONTINUE        reduce using rule 18 (expr -> expr OR expr .)
    BREAK           reduce using rule 18 (expr -> expr OR expr .)
    PRINT           reduce using rule 18 (expr -> expr OR expr .)
    WHILE           reduce using rule 18 (expr -> expr OR expr .)
    FOR             reduce using rule 18 (expr -> expr OR expr .)
    RETURN          reduce using rule 18 (expr -> expr OR expr .)
    IF              reduce using rule 18 (expr -> expr OR expr .)
    ID              reduce using rule 18 (expr -> expr OR expr .)
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 93

    (19) expr -> expr AND expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ,               reduce using rule 19 (expr -> expr AND expr .)
    OR              reduce using rule 19 (expr -> expr AND expr .)
    AND             reduce using rule 19 (expr -> expr AND expr .)
    XOR             reduce using rule 19 (expr -> expr AND expr .)
    LESSEREQUAL     reduce using rule 19 (expr -> expr AND expr .)
    GREATEREQUAL    reduce using rule 19 (expr -> expr AND expr .)
    LESSER          reduce using rule 19 (expr -> expr AND expr .)
    GREATER         reduce using rule 19 (expr -> expr AND expr .)
    NOTEQUAL        reduce using rule 19 (expr -> expr AND expr .)
    EQUAL           reduce using rule 19 (expr -> expr AND expr .)
    ;               reduce using rule 19 (expr -> expr AND expr .)
    )               reduce using rule 19 (expr -> expr AND expr .)
    ]               reduce using rule 19 (expr -> expr AND expr .)
    :               reduce using rule 19 (expr -> expr AND expr .)
    {               reduce using rule 19 (expr -> expr AND expr .)
    CONTINUE        reduce using rule 19 (expr -> expr AND expr .)
    BREAK           reduce using rule 19 (expr -> expr AND expr .)
    PRINT           reduce using rule 19 (expr -> expr AND expr .)
    WHILE           reduce using rule 19 (expr -> expr AND expr .)
    FOR             reduce using rule 19 (expr -> expr AND expr .)
    RETURN          reduce using rule 19 (expr -> expr AND expr .)
    IF              reduce using rule 19 (expr -> expr AND expr .)
    ID              reduce using rule 19 (expr -> expr AND expr .)
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 94

    (20) expr -> expr XOR expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ,               reduce using rule 20 (expr -> expr XOR expr .)
    OR              reduce using rule 20 (expr -> expr XOR expr .)
    AND             reduce using rule 20 (expr -> expr XOR expr .)
    XOR             reduce using rule 20 (expr -> expr XOR expr .)
    LESSEREQUAL     reduce using rule 20 (expr -> expr XOR expr .)
    GREATEREQUAL    reduce using rule 20 (expr -> expr XOR expr .)
    LESSER          reduce using rule 20 (expr -> expr XOR expr .)
    GREATER         reduce using rule 20 (expr -> expr XOR expr .)
    NOTEQUAL        reduce using rule 20 (expr -> expr XOR expr .)
    EQUAL           reduce using rule 20 (expr -> expr XOR expr .)
    ;               reduce using rule 20 (expr -> expr XOR expr .)
    )               reduce using rule 20 (expr -> expr XOR expr .)
    ]               reduce using rule 20 (expr -> expr XOR expr .)
    :               reduce using rule 20 (expr -> expr XOR expr .)
    {               reduce using rule 20 (expr -> expr XOR expr .)
    CONTINUE        reduce using rule 20 (expr -> expr XOR expr .)
    BREAK           reduce using rule 20 (expr -> expr XOR expr .)
    PRINT           reduce using rule 20 (expr -> expr XOR expr .)
    WHILE           reduce using rule 20 (expr -> expr XOR expr .)
    FOR             reduce using rule 20 (expr -> expr XOR expr .)
    RETURN          reduce using rule 20 (expr -> expr XOR expr .)
    IF              reduce using rule 20 (expr -> expr XOR expr .)
    ID              reduce using rule 20 (expr -> expr XOR expr .)
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 95

    (21) expr -> expr DOTSUB expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ,               reduce using rule 21 (expr -> expr DOTSUB expr .)
    OR              reduce using rule 21 (expr -> expr DOTSUB expr .)
    AND             reduce using rule 21 (expr -> expr DOTSUB expr .)
    XOR             reduce using rule 21 (expr -> expr DOTSUB expr .)
    DOTSUB          reduce using rule 21 (expr -> expr DOTSUB expr .)
    DOTADD          reduce using rule 21 (expr -> expr DOTSUB expr .)
    LESSEREQUAL     reduce using rule 21 (expr -> expr DOTSUB expr .)
    GREATEREQUAL    reduce using rule 21 (expr -> expr DOTSUB expr .)
    LESSER          reduce using rule 21 (expr -> expr DOTSUB expr .)
    GREATER         reduce using rule 21 (expr -> expr DOTSUB expr .)
    NOTEQUAL        reduce using rule 21 (expr -> expr DOTSUB expr .)
    EQUAL           reduce using rule 21 (expr -> expr DOTSUB expr .)
    -               reduce using rule 21 (expr -> expr DOTSUB expr .)
    +               reduce using rule 21 (expr -> expr DOTSUB expr .)
    ;               reduce using rule 21 (expr -> expr DOTSUB expr .)
    )               reduce using rule 21 (expr -> expr DOTSUB expr .)
    ]               reduce using rule 21 (expr -> expr DOTSUB expr .)
    :               reduce using rule 21 (expr -> expr DOTSUB expr .)
    {               reduce using rule 21 (expr -> expr DOTSUB expr .)
    CONTINUE        reduce using rule 21 (expr -> expr DOTSUB expr .)
    BREAK           reduce using rule 21 (expr -> expr DOTSUB expr .)
    PRINT           reduce using rule 21 (expr -> expr DOTSUB expr .)
    WHILE           reduce using rule 21 (expr -> expr DOTSUB expr .)
    FOR             reduce using rule 21 (expr -> expr DOTSUB expr .)
    RETURN          reduce using rule 21 (expr -> expr DOTSUB expr .)
    IF              reduce using rule 21 (expr -> expr DOTSUB expr .)
    ID              reduce using rule 21 (expr -> expr DOTSUB expr .)
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    /               shift and go to state 70
    *               shift and go to state 71


state 96

    (22) expr -> expr DOTADD expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ,               reduce using rule 22 (expr -> expr DOTADD expr .)
    OR              reduce using rule 22 (expr -> expr DOTADD expr .)
    AND             reduce using rule 22 (expr -> expr DOTADD expr .)
    XOR             reduce using rule 22 (expr -> expr DOTADD expr .)
    DOTSUB          reduce using rule 22 (expr -> expr DOTADD expr .)
    DOTADD          reduce using rule 22 (expr -> expr DOTADD expr .)
    LESSEREQUAL     reduce using rule 22 (expr -> expr DOTADD expr .)
    GREATEREQUAL    reduce using rule 22 (expr -> expr DOTADD expr .)
    LESSER          reduce using rule 22 (expr -> expr DOTADD expr .)
    GREATER         reduce using rule 22 (expr -> expr DOTADD expr .)
    NOTEQUAL        reduce using rule 22 (expr -> expr DOTADD expr .)
    EQUAL           reduce using rule 22 (expr -> expr DOTADD expr .)
    -               reduce using rule 22 (expr -> expr DOTADD expr .)
    +               reduce using rule 22 (expr -> expr DOTADD expr .)
    ;               reduce using rule 22 (expr -> expr DOTADD expr .)
    )               reduce using rule 22 (expr -> expr DOTADD expr .)
    ]               reduce using rule 22 (expr -> expr DOTADD expr .)
    :               reduce using rule 22 (expr -> expr DOTADD expr .)
    {               reduce using rule 22 (expr -> expr DOTADD expr .)
    CONTINUE        reduce using rule 22 (expr -> expr DOTADD expr .)
    BREAK           reduce using rule 22 (expr -> expr DOTADD expr .)
    PRINT           reduce using rule 22 (expr -> expr DOTADD expr .)
    WHILE           reduce using rule 22 (expr -> expr DOTADD expr .)
    FOR             reduce using rule 22 (expr -> expr DOTADD expr .)
    RETURN          reduce using rule 22 (expr -> expr DOTADD expr .)
    IF              reduce using rule 22 (expr -> expr DOTADD expr .)
    ID              reduce using rule 22 (expr -> expr DOTADD expr .)
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    /               shift and go to state 70
    *               shift and go to state 71


state 97

    (23) expr -> expr DOTDIV expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ,               reduce using rule 23 (expr -> expr DOTDIV expr .)
    OR              reduce using rule 23 (expr -> expr DOTDIV expr .)
    AND             reduce using rule 23 (expr -> expr DOTDIV expr .)
    XOR             reduce using rule 23 (expr -> expr DOTDIV expr .)
    DOTSUB          reduce using rule 23 (expr -> expr DOTDIV expr .)
    DOTADD          reduce using rule 23 (expr -> expr DOTDIV expr .)
    DOTDIV          reduce using rule 23 (expr -> expr DOTDIV expr .)
    DOTMUL          reduce using rule 23 (expr -> expr DOTDIV expr .)
    LESSEREQUAL     reduce using rule 23 (expr -> expr DOTDIV expr .)
    GREATEREQUAL    reduce using rule 23 (expr -> expr DOTDIV expr .)
    LESSER          reduce using rule 23 (expr -> expr DOTDIV expr .)
    GREATER         reduce using rule 23 (expr -> expr DOTDIV expr .)
    NOTEQUAL        reduce using rule 23 (expr -> expr DOTDIV expr .)
    EQUAL           reduce using rule 23 (expr -> expr DOTDIV expr .)
    /               reduce using rule 23 (expr -> expr DOTDIV expr .)
    *               reduce using rule 23 (expr -> expr DOTDIV expr .)
    -               reduce using rule 23 (expr -> expr DOTDIV expr .)
    +               reduce using rule 23 (expr -> expr DOTDIV expr .)
    ;               reduce using rule 23 (expr -> expr DOTDIV expr .)
    )               reduce using rule 23 (expr -> expr DOTDIV expr .)
    ]               reduce using rule 23 (expr -> expr DOTDIV expr .)
    :               reduce using rule 23 (expr -> expr DOTDIV expr .)
    {               reduce using rule 23 (expr -> expr DOTDIV expr .)
    CONTINUE        reduce using rule 23 (expr -> expr DOTDIV expr .)
    BREAK           reduce using rule 23 (expr -> expr DOTDIV expr .)
    PRINT           reduce using rule 23 (expr -> expr DOTDIV expr .)
    WHILE           reduce using rule 23 (expr -> expr DOTDIV expr .)
    FOR             reduce using rule 23 (expr -> expr DOTDIV expr .)
    RETURN          reduce using rule 23 (expr -> expr DOTDIV expr .)
    IF              reduce using rule 23 (expr -> expr DOTDIV expr .)
    ID              reduce using rule 23 (expr -> expr DOTDIV expr .)


state 98

    (24) expr -> expr DOTMUL expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ,               reduce using rule 24 (expr -> expr DOTMUL expr .)
    OR              reduce using rule 24 (expr -> expr DOTMUL expr .)
    AND             reduce using rule 24 (expr -> expr DOTMUL expr .)
    XOR             reduce using rule 24 (expr -> expr DOTMUL expr .)
    DOTSUB          reduce using rule 24 (expr -> expr DOTMUL expr .)
    DOTADD          reduce using rule 24 (expr -> expr DOTMUL expr .)
    DOTDIV          reduce using rule 24 (expr -> expr DOTMUL expr .)
    DOTMUL          reduce using rule 24 (expr -> expr DOTMUL expr .)
    LESSEREQUAL     reduce using rule 24 (expr -> expr DOTMUL expr .)
    GREATEREQUAL    reduce using rule 24 (expr -> expr DOTMUL expr .)
    LESSER          reduce using rule 24 (expr -> expr DOTMUL expr .)
    GREATER         reduce using rule 24 (expr -> expr DOTMUL expr .)
    NOTEQUAL        reduce using rule 24 (expr -> expr DOTMUL expr .)
    EQUAL           reduce using rule 24 (expr -> expr DOTMUL expr .)
    /               reduce using rule 24 (expr -> expr DOTMUL expr .)
    *               reduce using rule 24 (expr -> expr DOTMUL expr .)
    -               reduce using rule 24 (expr -> expr DOTMUL expr .)
    +               reduce using rule 24 (expr -> expr DOTMUL expr .)
    ;               reduce using rule 24 (expr -> expr DOTMUL expr .)
    )               reduce using rule 24 (expr -> expr DOTMUL expr .)
    ]               reduce using rule 24 (expr -> expr DOTMUL expr .)
    :               reduce using rule 24 (expr -> expr DOTMUL expr .)
    {               reduce using rule 24 (expr -> expr DOTMUL expr .)
    CONTINUE        reduce using rule 24 (expr -> expr DOTMUL expr .)
    BREAK           reduce using rule 24 (expr -> expr DOTMUL expr .)
    PRINT           reduce using rule 24 (expr -> expr DOTMUL expr .)
    WHILE           reduce using rule 24 (expr -> expr DOTMUL expr .)
    FOR             reduce using rule 24 (expr -> expr DOTMUL expr .)
    RETURN          reduce using rule 24 (expr -> expr DOTMUL expr .)
    IF              reduce using rule 24 (expr -> expr DOTMUL expr .)
    ID              reduce using rule 24 (expr -> expr DOTMUL expr .)


state 99

    (25) expr -> expr LESSEREQUAL expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ,               reduce using rule 25 (expr -> expr LESSEREQUAL expr .)
    LESSEREQUAL     reduce using rule 25 (expr -> expr LESSEREQUAL expr .)
    GREATEREQUAL    reduce using rule 25 (expr -> expr LESSEREQUAL expr .)
    LESSER          reduce using rule 25 (expr -> expr LESSEREQUAL expr .)
    GREATER         reduce using rule 25 (expr -> expr LESSEREQUAL expr .)
    NOTEQUAL        reduce using rule 25 (expr -> expr LESSEREQUAL expr .)
    EQUAL           reduce using rule 25 (expr -> expr LESSEREQUAL expr .)
    ;               reduce using rule 25 (expr -> expr LESSEREQUAL expr .)
    )               reduce using rule 25 (expr -> expr LESSEREQUAL expr .)
    ]               reduce using rule 25 (expr -> expr LESSEREQUAL expr .)
    :               reduce using rule 25 (expr -> expr LESSEREQUAL expr .)
    {               reduce using rule 25 (expr -> expr LESSEREQUAL expr .)
    CONTINUE        reduce using rule 25 (expr -> expr LESSEREQUAL expr .)
    BREAK           reduce using rule 25 (expr -> expr LESSEREQUAL expr .)
    PRINT           reduce using rule 25 (expr -> expr LESSEREQUAL expr .)
    WHILE           reduce using rule 25 (expr -> expr LESSEREQUAL expr .)
    FOR             reduce using rule 25 (expr -> expr LESSEREQUAL expr .)
    RETURN          reduce using rule 25 (expr -> expr LESSEREQUAL expr .)
    IF              reduce using rule 25 (expr -> expr LESSEREQUAL expr .)
    ID              reduce using rule 25 (expr -> expr LESSEREQUAL expr .)
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 100

    (26) expr -> expr GREATEREQUAL expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ,               reduce using rule 26 (expr -> expr GREATEREQUAL expr .)
    LESSEREQUAL     reduce using rule 26 (expr -> expr GREATEREQUAL expr .)
    GREATEREQUAL    reduce using rule 26 (expr -> expr GREATEREQUAL expr .)
    LESSER          reduce using rule 26 (expr -> expr GREATEREQUAL expr .)
    GREATER         reduce using rule 26 (expr -> expr GREATEREQUAL expr .)
    NOTEQUAL        reduce using rule 26 (expr -> expr GREATEREQUAL expr .)
    EQUAL           reduce using rule 26 (expr -> expr GREATEREQUAL expr .)
    ;               reduce using rule 26 (expr -> expr GREATEREQUAL expr .)
    )               reduce using rule 26 (expr -> expr GREATEREQUAL expr .)
    ]               reduce using rule 26 (expr -> expr GREATEREQUAL expr .)
    :               reduce using rule 26 (expr -> expr GREATEREQUAL expr .)
    {               reduce using rule 26 (expr -> expr GREATEREQUAL expr .)
    CONTINUE        reduce using rule 26 (expr -> expr GREATEREQUAL expr .)
    BREAK           reduce using rule 26 (expr -> expr GREATEREQUAL expr .)
    PRINT           reduce using rule 26 (expr -> expr GREATEREQUAL expr .)
    WHILE           reduce using rule 26 (expr -> expr GREATEREQUAL expr .)
    FOR             reduce using rule 26 (expr -> expr GREATEREQUAL expr .)
    RETURN          reduce using rule 26 (expr -> expr GREATEREQUAL expr .)
    IF              reduce using rule 26 (expr -> expr GREATEREQUAL expr .)
    ID              reduce using rule 26 (expr -> expr GREATEREQUAL expr .)
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 101

    (27) expr -> expr LESSER expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ,               reduce using rule 27 (expr -> expr LESSER expr .)
    LESSEREQUAL     reduce using rule 27 (expr -> expr LESSER expr .)
    GREATEREQUAL    reduce using rule 27 (expr -> expr LESSER expr .)
    LESSER          reduce using rule 27 (expr -> expr LESSER expr .)
    GREATER         reduce using rule 27 (expr -> expr LESSER expr .)
    NOTEQUAL        reduce using rule 27 (expr -> expr LESSER expr .)
    EQUAL           reduce using rule 27 (expr -> expr LESSER expr .)
    ;               reduce using rule 27 (expr -> expr LESSER expr .)
    )               reduce using rule 27 (expr -> expr LESSER expr .)
    ]               reduce using rule 27 (expr -> expr LESSER expr .)
    :               reduce using rule 27 (expr -> expr LESSER expr .)
    {               reduce using rule 27 (expr -> expr LESSER expr .)
    CONTINUE        reduce using rule 27 (expr -> expr LESSER expr .)
    BREAK           reduce using rule 27 (expr -> expr LESSER expr .)
    PRINT           reduce using rule 27 (expr -> expr LESSER expr .)
    WHILE           reduce using rule 27 (expr -> expr LESSER expr .)
    FOR             reduce using rule 27 (expr -> expr LESSER expr .)
    RETURN          reduce using rule 27 (expr -> expr LESSER expr .)
    IF              reduce using rule 27 (expr -> expr LESSER expr .)
    ID              reduce using rule 27 (expr -> expr LESSER expr .)
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 102

    (28) expr -> expr GREATER expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ,               reduce using rule 28 (expr -> expr GREATER expr .)
    LESSEREQUAL     reduce using rule 28 (expr -> expr GREATER expr .)
    GREATEREQUAL    reduce using rule 28 (expr -> expr GREATER expr .)
    LESSER          reduce using rule 28 (expr -> expr GREATER expr .)
    GREATER         reduce using rule 28 (expr -> expr GREATER expr .)
    NOTEQUAL        reduce using rule 28 (expr -> expr GREATER expr .)
    EQUAL           reduce using rule 28 (expr -> expr GREATER expr .)
    ;               reduce using rule 28 (expr -> expr GREATER expr .)
    )               reduce using rule 28 (expr -> expr GREATER expr .)
    ]               reduce using rule 28 (expr -> expr GREATER expr .)
    :               reduce using rule 28 (expr -> expr GREATER expr .)
    {               reduce using rule 28 (expr -> expr GREATER expr .)
    CONTINUE        reduce using rule 28 (expr -> expr GREATER expr .)
    BREAK           reduce using rule 28 (expr -> expr GREATER expr .)
    PRINT           reduce using rule 28 (expr -> expr GREATER expr .)
    WHILE           reduce using rule 28 (expr -> expr GREATER expr .)
    FOR             reduce using rule 28 (expr -> expr GREATER expr .)
    RETURN          reduce using rule 28 (expr -> expr GREATER expr .)
    IF              reduce using rule 28 (expr -> expr GREATER expr .)
    ID              reduce using rule 28 (expr -> expr GREATER expr .)
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 103

    (29) expr -> expr NOTEQUAL expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ,               reduce using rule 29 (expr -> expr NOTEQUAL expr .)
    LESSEREQUAL     reduce using rule 29 (expr -> expr NOTEQUAL expr .)
    GREATEREQUAL    reduce using rule 29 (expr -> expr NOTEQUAL expr .)
    LESSER          reduce using rule 29 (expr -> expr NOTEQUAL expr .)
    GREATER         reduce using rule 29 (expr -> expr NOTEQUAL expr .)
    NOTEQUAL        reduce using rule 29 (expr -> expr NOTEQUAL expr .)
    EQUAL           reduce using rule 29 (expr -> expr NOTEQUAL expr .)
    ;               reduce using rule 29 (expr -> expr NOTEQUAL expr .)
    )               reduce using rule 29 (expr -> expr NOTEQUAL expr .)
    ]               reduce using rule 29 (expr -> expr NOTEQUAL expr .)
    :               reduce using rule 29 (expr -> expr NOTEQUAL expr .)
    {               reduce using rule 29 (expr -> expr NOTEQUAL expr .)
    CONTINUE        reduce using rule 29 (expr -> expr NOTEQUAL expr .)
    BREAK           reduce using rule 29 (expr -> expr NOTEQUAL expr .)
    PRINT           reduce using rule 29 (expr -> expr NOTEQUAL expr .)
    WHILE           reduce using rule 29 (expr -> expr NOTEQUAL expr .)
    FOR             reduce using rule 29 (expr -> expr NOTEQUAL expr .)
    RETURN          reduce using rule 29 (expr -> expr NOTEQUAL expr .)
    IF              reduce using rule 29 (expr -> expr NOTEQUAL expr .)
    ID              reduce using rule 29 (expr -> expr NOTEQUAL expr .)
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 104

    (30) expr -> expr EQUAL expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ,               reduce using rule 30 (expr -> expr EQUAL expr .)
    LESSEREQUAL     reduce using rule 30 (expr -> expr EQUAL expr .)
    GREATEREQUAL    reduce using rule 30 (expr -> expr EQUAL expr .)
    LESSER          reduce using rule 30 (expr -> expr EQUAL expr .)
    GREATER         reduce using rule 30 (expr -> expr EQUAL expr .)
    NOTEQUAL        reduce using rule 30 (expr -> expr EQUAL expr .)
    EQUAL           reduce using rule 30 (expr -> expr EQUAL expr .)
    ;               reduce using rule 30 (expr -> expr EQUAL expr .)
    )               reduce using rule 30 (expr -> expr EQUAL expr .)
    ]               reduce using rule 30 (expr -> expr EQUAL expr .)
    :               reduce using rule 30 (expr -> expr EQUAL expr .)
    {               reduce using rule 30 (expr -> expr EQUAL expr .)
    CONTINUE        reduce using rule 30 (expr -> expr EQUAL expr .)
    BREAK           reduce using rule 30 (expr -> expr EQUAL expr .)
    PRINT           reduce using rule 30 (expr -> expr EQUAL expr .)
    WHILE           reduce using rule 30 (expr -> expr EQUAL expr .)
    FOR             reduce using rule 30 (expr -> expr EQUAL expr .)
    RETURN          reduce using rule 30 (expr -> expr EQUAL expr .)
    IF              reduce using rule 30 (expr -> expr EQUAL expr .)
    ID              reduce using rule 30 (expr -> expr EQUAL expr .)
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 105

    (31) expr -> expr / expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ,               reduce using rule 31 (expr -> expr / expr .)
    OR              reduce using rule 31 (expr -> expr / expr .)
    AND             reduce using rule 31 (expr -> expr / expr .)
    XOR             reduce using rule 31 (expr -> expr / expr .)
    DOTSUB          reduce using rule 31 (expr -> expr / expr .)
    DOTADD          reduce using rule 31 (expr -> expr / expr .)
    DOTDIV          reduce using rule 31 (expr -> expr / expr .)
    DOTMUL          reduce using rule 31 (expr -> expr / expr .)
    LESSEREQUAL     reduce using rule 31 (expr -> expr / expr .)
    GREATEREQUAL    reduce using rule 31 (expr -> expr / expr .)
    LESSER          reduce using rule 31 (expr -> expr / expr .)
    GREATER         reduce using rule 31 (expr -> expr / expr .)
    NOTEQUAL        reduce using rule 31 (expr -> expr / expr .)
    EQUAL           reduce using rule 31 (expr -> expr / expr .)
    /               reduce using rule 31 (expr -> expr / expr .)
    *               reduce using rule 31 (expr -> expr / expr .)
    -               reduce using rule 31 (expr -> expr / expr .)
    +               reduce using rule 31 (expr -> expr / expr .)
    ;               reduce using rule 31 (expr -> expr / expr .)
    )               reduce using rule 31 (expr -> expr / expr .)
    ]               reduce using rule 31 (expr -> expr / expr .)
    :               reduce using rule 31 (expr -> expr / expr .)
    {               reduce using rule 31 (expr -> expr / expr .)
    CONTINUE        reduce using rule 31 (expr -> expr / expr .)
    BREAK           reduce using rule 31 (expr -> expr / expr .)
    PRINT           reduce using rule 31 (expr -> expr / expr .)
    WHILE           reduce using rule 31 (expr -> expr / expr .)
    FOR             reduce using rule 31 (expr -> expr / expr .)
    RETURN          reduce using rule 31 (expr -> expr / expr .)
    IF              reduce using rule 31 (expr -> expr / expr .)
    ID              reduce using rule 31 (expr -> expr / expr .)


state 106

    (32) expr -> expr * expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ,               reduce using rule 32 (expr -> expr * expr .)
    OR              reduce using rule 32 (expr -> expr * expr .)
    AND             reduce using rule 32 (expr -> expr * expr .)
    XOR             reduce using rule 32 (expr -> expr * expr .)
    DOTSUB          reduce using rule 32 (expr -> expr * expr .)
    DOTADD          reduce using rule 32 (expr -> expr * expr .)
    DOTDIV          reduce using rule 32 (expr -> expr * expr .)
    DOTMUL          reduce using rule 32 (expr -> expr * expr .)
    LESSEREQUAL     reduce using rule 32 (expr -> expr * expr .)
    GREATEREQUAL    reduce using rule 32 (expr -> expr * expr .)
    LESSER          reduce using rule 32 (expr -> expr * expr .)
    GREATER         reduce using rule 32 (expr -> expr * expr .)
    NOTEQUAL        reduce using rule 32 (expr -> expr * expr .)
    EQUAL           reduce using rule 32 (expr -> expr * expr .)
    /               reduce using rule 32 (expr -> expr * expr .)
    *               reduce using rule 32 (expr -> expr * expr .)
    -               reduce using rule 32 (expr -> expr * expr .)
    +               reduce using rule 32 (expr -> expr * expr .)
    ;               reduce using rule 32 (expr -> expr * expr .)
    )               reduce using rule 32 (expr -> expr * expr .)
    ]               reduce using rule 32 (expr -> expr * expr .)
    :               reduce using rule 32 (expr -> expr * expr .)
    {               reduce using rule 32 (expr -> expr * expr .)
    CONTINUE        reduce using rule 32 (expr -> expr * expr .)
    BREAK           reduce using rule 32 (expr -> expr * expr .)
    PRINT           reduce using rule 32 (expr -> expr * expr .)
    WHILE           reduce using rule 32 (expr -> expr * expr .)
    FOR             reduce using rule 32 (expr -> expr * expr .)
    RETURN          reduce using rule 32 (expr -> expr * expr .)
    IF              reduce using rule 32 (expr -> expr * expr .)
    ID              reduce using rule 32 (expr -> expr * expr .)


state 107

    (33) expr -> expr - expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ,               reduce using rule 33 (expr -> expr - expr .)
    OR              reduce using rule 33 (expr -> expr - expr .)
    AND             reduce using rule 33 (expr -> expr - expr .)
    XOR             reduce using rule 33 (expr -> expr - expr .)
    DOTSUB          reduce using rule 33 (expr -> expr - expr .)
    DOTADD          reduce using rule 33 (expr -> expr - expr .)
    LESSEREQUAL     reduce using rule 33 (expr -> expr - expr .)
    GREATEREQUAL    reduce using rule 33 (expr -> expr - expr .)
    LESSER          reduce using rule 33 (expr -> expr - expr .)
    GREATER         reduce using rule 33 (expr -> expr - expr .)
    NOTEQUAL        reduce using rule 33 (expr -> expr - expr .)
    EQUAL           reduce using rule 33 (expr -> expr - expr .)
    -               reduce using rule 33 (expr -> expr - expr .)
    +               reduce using rule 33 (expr -> expr - expr .)
    ;               reduce using rule 33 (expr -> expr - expr .)
    )               reduce using rule 33 (expr -> expr - expr .)
    ]               reduce using rule 33 (expr -> expr - expr .)
    :               reduce using rule 33 (expr -> expr - expr .)
    {               reduce using rule 33 (expr -> expr - expr .)
    CONTINUE        reduce using rule 33 (expr -> expr - expr .)
    BREAK           reduce using rule 33 (expr -> expr - expr .)
    PRINT           reduce using rule 33 (expr -> expr - expr .)
    WHILE           reduce using rule 33 (expr -> expr - expr .)
    FOR             reduce using rule 33 (expr -> expr - expr .)
    RETURN          reduce using rule 33 (expr -> expr - expr .)
    IF              reduce using rule 33 (expr -> expr - expr .)
    ID              reduce using rule 33 (expr -> expr - expr .)
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    /               shift and go to state 70
    *               shift and go to state 71


state 108

    (34) expr -> expr + expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ,               reduce using rule 34 (expr -> expr + expr .)
    OR              reduce using rule 34 (expr -> expr + expr .)
    AND             reduce using rule 34 (expr -> expr + expr .)
    XOR             reduce using rule 34 (expr -> expr + expr .)
    DOTSUB          reduce using rule 34 (expr -> expr + expr .)
    DOTADD          reduce using rule 34 (expr -> expr + expr .)
    LESSEREQUAL     reduce using rule 34 (expr -> expr + expr .)
    GREATEREQUAL    reduce using rule 34 (expr -> expr + expr .)
    LESSER          reduce using rule 34 (expr -> expr + expr .)
    GREATER         reduce using rule 34 (expr -> expr + expr .)
    NOTEQUAL        reduce using rule 34 (expr -> expr + expr .)
    EQUAL           reduce using rule 34 (expr -> expr + expr .)
    -               reduce using rule 34 (expr -> expr + expr .)
    +               reduce using rule 34 (expr -> expr + expr .)
    ;               reduce using rule 34 (expr -> expr + expr .)
    )               reduce using rule 34 (expr -> expr + expr .)
    ]               reduce using rule 34 (expr -> expr + expr .)
    :               reduce using rule 34 (expr -> expr + expr .)
    {               reduce using rule 34 (expr -> expr + expr .)
    CONTINUE        reduce using rule 34 (expr -> expr + expr .)
    BREAK           reduce using rule 34 (expr -> expr + expr .)
    PRINT           reduce using rule 34 (expr -> expr + expr .)
    WHILE           reduce using rule 34 (expr -> expr + expr .)
    FOR             reduce using rule 34 (expr -> expr + expr .)
    RETURN          reduce using rule 34 (expr -> expr + expr .)
    IF              reduce using rule 34 (expr -> expr + expr .)
    ID              reduce using rule 34 (expr -> expr + expr .)
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    /               shift and go to state 70
    *               shift and go to state 71


state 109

    (15) expr -> mat_fun ( expr . )
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    )               shift and go to state 121
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    LESSEREQUAL     shift and go to state 64
    GREATEREQUAL    shift and go to state 65
    LESSER          shift and go to state 66
    GREATER         shift and go to state 67
    NOTEQUAL        shift and go to state 68
    EQUAL           shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 110

    (35) expr -> ( expr ) .
    ,               reduce using rule 35 (expr -> ( expr ) .)
    OR              reduce using rule 35 (expr -> ( expr ) .)
    AND             reduce using rule 35 (expr -> ( expr ) .)
    XOR             reduce using rule 35 (expr -> ( expr ) .)
    DOTSUB          reduce using rule 35 (expr -> ( expr ) .)
    DOTADD          reduce using rule 35 (expr -> ( expr ) .)
    DOTDIV          reduce using rule 35 (expr -> ( expr ) .)
    DOTMUL          reduce using rule 35 (expr -> ( expr ) .)
    LESSEREQUAL     reduce using rule 35 (expr -> ( expr ) .)
    GREATEREQUAL    reduce using rule 35 (expr -> ( expr ) .)
    LESSER          reduce using rule 35 (expr -> ( expr ) .)
    GREATER         reduce using rule 35 (expr -> ( expr ) .)
    NOTEQUAL        reduce using rule 35 (expr -> ( expr ) .)
    EQUAL           reduce using rule 35 (expr -> ( expr ) .)
    /               reduce using rule 35 (expr -> ( expr ) .)
    *               reduce using rule 35 (expr -> ( expr ) .)
    -               reduce using rule 35 (expr -> ( expr ) .)
    +               reduce using rule 35 (expr -> ( expr ) .)
    ;               reduce using rule 35 (expr -> ( expr ) .)
    )               reduce using rule 35 (expr -> ( expr ) .)
    ]               reduce using rule 35 (expr -> ( expr ) .)
    :               reduce using rule 35 (expr -> ( expr ) .)
    {               reduce using rule 35 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 35 (expr -> ( expr ) .)
    BREAK           reduce using rule 35 (expr -> ( expr ) .)
    PRINT           reduce using rule 35 (expr -> ( expr ) .)
    WHILE           reduce using rule 35 (expr -> ( expr ) .)
    FOR             reduce using rule 35 (expr -> ( expr ) .)
    RETURN          reduce using rule 35 (expr -> ( expr ) .)
    IF              reduce using rule 35 (expr -> ( expr ) .)
    ID              reduce using rule 35 (expr -> ( expr ) .)


state 111

    (57) vector -> [ variables . ]
    (59) variables -> variables . , variable
    ]               shift and go to state 122
    ,               shift and go to state 123


state 112

    (58) variables -> variable .
    ]               reduce using rule 58 (variables -> variable .)
    ,               reduce using rule 58 (variables -> variable .)


state 113

    (60) variable -> expr .
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ]               reduce using rule 60 (variable -> expr .)
    ,               reduce using rule 60 (variable -> expr .)
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    LESSEREQUAL     shift and go to state 64
    GREATEREQUAL    shift and go to state 65
    LESSER          shift and go to state 66
    GREATER         shift and go to state 67
    NOTEQUAL        shift and go to state 68
    EQUAL           shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 114

    (50) matrix -> [ vectors ] .
    ,               reduce using rule 50 (matrix -> [ vectors ] .)
    OR              reduce using rule 50 (matrix -> [ vectors ] .)
    AND             reduce using rule 50 (matrix -> [ vectors ] .)
    XOR             reduce using rule 50 (matrix -> [ vectors ] .)
    DOTSUB          reduce using rule 50 (matrix -> [ vectors ] .)
    DOTADD          reduce using rule 50 (matrix -> [ vectors ] .)
    DOTDIV          reduce using rule 50 (matrix -> [ vectors ] .)
    DOTMUL          reduce using rule 50 (matrix -> [ vectors ] .)
    LESSEREQUAL     reduce using rule 50 (matrix -> [ vectors ] .)
    GREATEREQUAL    reduce using rule 50 (matrix -> [ vectors ] .)
    LESSER          reduce using rule 50 (matrix -> [ vectors ] .)
    GREATER         reduce using rule 50 (matrix -> [ vectors ] .)
    NOTEQUAL        reduce using rule 50 (matrix -> [ vectors ] .)
    EQUAL           reduce using rule 50 (matrix -> [ vectors ] .)
    /               reduce using rule 50 (matrix -> [ vectors ] .)
    *               reduce using rule 50 (matrix -> [ vectors ] .)
    -               reduce using rule 50 (matrix -> [ vectors ] .)
    +               reduce using rule 50 (matrix -> [ vectors ] .)
    ;               reduce using rule 50 (matrix -> [ vectors ] .)
    )               reduce using rule 50 (matrix -> [ vectors ] .)
    ]               reduce using rule 50 (matrix -> [ vectors ] .)
    :               reduce using rule 50 (matrix -> [ vectors ] .)
    {               reduce using rule 50 (matrix -> [ vectors ] .)
    CONTINUE        reduce using rule 50 (matrix -> [ vectors ] .)
    BREAK           reduce using rule 50 (matrix -> [ vectors ] .)
    PRINT           reduce using rule 50 (matrix -> [ vectors ] .)
    WHILE           reduce using rule 50 (matrix -> [ vectors ] .)
    FOR             reduce using rule 50 (matrix -> [ vectors ] .)
    RETURN          reduce using rule 50 (matrix -> [ vectors ] .)
    IF              reduce using rule 50 (matrix -> [ vectors ] .)
    ID              reduce using rule 50 (matrix -> [ vectors ] .)


state 115

    (52) vectors -> vectors , . vector
    (53) vector -> . ID [ expr : ]
    (54) vector -> . ID [ : expr ]
    (55) vector -> . ID [ expr : expr ]
    (56) vector -> . ID [ expr ]
    (57) vector -> . [ variables ]
    ID              shift and go to state 80
    [               shift and go to state 77

    vector                         shift and go to state 124

state 116

    (53) vector -> ID [ . expr : ]
    (54) vector -> ID [ . : expr ]
    (55) vector -> ID [ . expr : expr ]
    (56) vector -> ID [ . expr ]
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    :               shift and go to state 126
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 125
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 117

    (66) while_l -> WHILE ( expr ) . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . print_i ;
    (8) instruction -> . assign ;
    (9) instruction -> . while_l
    (10) instruction -> . for_l
    (11) instruction -> . CONTINUE ;
    (12) instruction -> . BREAK ;
    (13) instruction -> . return_i ;
    (14) instruction -> . if_i
    (70) print_i -> . PRINT printargs
    (43) assign -> . var DIVASSIGN expr
    (44) assign -> . var MULASSIGN expr
    (45) assign -> . var SUBASSIGN expr
    (46) assign -> . var ADDASSIGN expr
    (47) assign -> . var = expr
    (66) while_l -> . WHILE ( expr ) instruction
    (67) for_l -> . FOR ID = expr : expr instruction
    (68) return_i -> . RETURN expr
    (69) return_i -> . RETURN
    (64) if_i -> . IF ( expr ) instruction ELSE instruction
    (65) if_i -> . IF ( expr ) instruction
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    {               shift and go to state 5
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    PRINT           shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    RETURN          shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 18

    instruction                    shift and go to state 127
    print_i                        shift and go to state 6
    assign                         shift and go to state 7
    while_l                        shift and go to state 8
    for_l                          shift and go to state 9
    return_i                       shift and go to state 12
    if_i                           shift and go to state 13
    var                            shift and go to state 15
    matel                          shift and go to state 21

state 118

    (67) for_l -> FOR ID = expr . : expr instruction
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    :               shift and go to state 128
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    LESSEREQUAL     shift and go to state 64
    GREATEREQUAL    shift and go to state 65
    LESSER          shift and go to state 66
    GREATER         shift and go to state 67
    NOTEQUAL        shift and go to state 68
    EQUAL           shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 119

    (42) matel -> ID [ expr , . expr ]
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 129
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 120

    (64) if_i -> IF ( expr ) . instruction ELSE instruction
    (65) if_i -> IF ( expr ) . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . print_i ;
    (8) instruction -> . assign ;
    (9) instruction -> . while_l
    (10) instruction -> . for_l
    (11) instruction -> . CONTINUE ;
    (12) instruction -> . BREAK ;
    (13) instruction -> . return_i ;
    (14) instruction -> . if_i
    (70) print_i -> . PRINT printargs
    (43) assign -> . var DIVASSIGN expr
    (44) assign -> . var MULASSIGN expr
    (45) assign -> . var SUBASSIGN expr
    (46) assign -> . var ADDASSIGN expr
    (47) assign -> . var = expr
    (66) while_l -> . WHILE ( expr ) instruction
    (67) for_l -> . FOR ID = expr : expr instruction
    (68) return_i -> . RETURN expr
    (69) return_i -> . RETURN
    (64) if_i -> . IF ( expr ) instruction ELSE instruction
    (65) if_i -> . IF ( expr ) instruction
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    {               shift and go to state 5
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    PRINT           shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    RETURN          shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 18

    instruction                    shift and go to state 130
    print_i                        shift and go to state 6
    assign                         shift and go to state 7
    while_l                        shift and go to state 8
    for_l                          shift and go to state 9
    return_i                       shift and go to state 12
    if_i                           shift and go to state 13
    var                            shift and go to state 15
    matel                          shift and go to state 21

state 121

    (15) expr -> mat_fun ( expr ) .
    ,               reduce using rule 15 (expr -> mat_fun ( expr ) .)
    OR              reduce using rule 15 (expr -> mat_fun ( expr ) .)
    AND             reduce using rule 15 (expr -> mat_fun ( expr ) .)
    XOR             reduce using rule 15 (expr -> mat_fun ( expr ) .)
    DOTSUB          reduce using rule 15 (expr -> mat_fun ( expr ) .)
    DOTADD          reduce using rule 15 (expr -> mat_fun ( expr ) .)
    DOTDIV          reduce using rule 15 (expr -> mat_fun ( expr ) .)
    DOTMUL          reduce using rule 15 (expr -> mat_fun ( expr ) .)
    LESSEREQUAL     reduce using rule 15 (expr -> mat_fun ( expr ) .)
    GREATEREQUAL    reduce using rule 15 (expr -> mat_fun ( expr ) .)
    LESSER          reduce using rule 15 (expr -> mat_fun ( expr ) .)
    GREATER         reduce using rule 15 (expr -> mat_fun ( expr ) .)
    NOTEQUAL        reduce using rule 15 (expr -> mat_fun ( expr ) .)
    EQUAL           reduce using rule 15 (expr -> mat_fun ( expr ) .)
    /               reduce using rule 15 (expr -> mat_fun ( expr ) .)
    *               reduce using rule 15 (expr -> mat_fun ( expr ) .)
    -               reduce using rule 15 (expr -> mat_fun ( expr ) .)
    +               reduce using rule 15 (expr -> mat_fun ( expr ) .)
    ;               reduce using rule 15 (expr -> mat_fun ( expr ) .)
    )               reduce using rule 15 (expr -> mat_fun ( expr ) .)
    ]               reduce using rule 15 (expr -> mat_fun ( expr ) .)
    :               reduce using rule 15 (expr -> mat_fun ( expr ) .)
    {               reduce using rule 15 (expr -> mat_fun ( expr ) .)
    CONTINUE        reduce using rule 15 (expr -> mat_fun ( expr ) .)
    BREAK           reduce using rule 15 (expr -> mat_fun ( expr ) .)
    PRINT           reduce using rule 15 (expr -> mat_fun ( expr ) .)
    WHILE           reduce using rule 15 (expr -> mat_fun ( expr ) .)
    FOR             reduce using rule 15 (expr -> mat_fun ( expr ) .)
    RETURN          reduce using rule 15 (expr -> mat_fun ( expr ) .)
    IF              reduce using rule 15 (expr -> mat_fun ( expr ) .)
    ID              reduce using rule 15 (expr -> mat_fun ( expr ) .)


state 122

    (57) vector -> [ variables ] .
    ]               reduce using rule 57 (vector -> [ variables ] .)
    ,               reduce using rule 57 (vector -> [ variables ] .)


state 123

    (59) variables -> variables , . variable
    (60) variable -> . expr
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    variable                       shift and go to state 131
    expr                           shift and go to state 113
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 124

    (52) vectors -> vectors , vector .
    ]               reduce using rule 52 (vectors -> vectors , vector .)
    ,               reduce using rule 52 (vectors -> vectors , vector .)


state 125

    (53) vector -> ID [ expr . : ]
    (55) vector -> ID [ expr . : expr ]
    (56) vector -> ID [ expr . ]
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    :               shift and go to state 132
    ]               shift and go to state 133
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    LESSEREQUAL     shift and go to state 64
    GREATEREQUAL    shift and go to state 65
    LESSER          shift and go to state 66
    GREATER         shift and go to state 67
    NOTEQUAL        shift and go to state 68
    EQUAL           shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 126

    (54) vector -> ID [ : . expr ]
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 134
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 127

    (66) while_l -> WHILE ( expr ) instruction .
    {               reduce using rule 66 (while_l -> WHILE ( expr ) instruction .)
    CONTINUE        reduce using rule 66 (while_l -> WHILE ( expr ) instruction .)
    BREAK           reduce using rule 66 (while_l -> WHILE ( expr ) instruction .)
    PRINT           reduce using rule 66 (while_l -> WHILE ( expr ) instruction .)
    WHILE           reduce using rule 66 (while_l -> WHILE ( expr ) instruction .)
    FOR             reduce using rule 66 (while_l -> WHILE ( expr ) instruction .)
    RETURN          reduce using rule 66 (while_l -> WHILE ( expr ) instruction .)
    IF              reduce using rule 66 (while_l -> WHILE ( expr ) instruction .)
    ID              reduce using rule 66 (while_l -> WHILE ( expr ) instruction .)
    $end            reduce using rule 66 (while_l -> WHILE ( expr ) instruction .)
    }               reduce using rule 66 (while_l -> WHILE ( expr ) instruction .)
    ELSE            reduce using rule 66 (while_l -> WHILE ( expr ) instruction .)


state 128

    (67) for_l -> FOR ID = expr : . expr instruction
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 135
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 129

    (42) matel -> ID [ expr , expr . ]
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ]               shift and go to state 136
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    LESSEREQUAL     shift and go to state 64
    GREATEREQUAL    shift and go to state 65
    LESSER          shift and go to state 66
    GREATER         shift and go to state 67
    NOTEQUAL        shift and go to state 68
    EQUAL           shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 130

    (64) if_i -> IF ( expr ) instruction . ELSE instruction
    (65) if_i -> IF ( expr ) instruction .
    ELSE            shift and go to state 137
    {               reduce using rule 65 (if_i -> IF ( expr ) instruction .)
    CONTINUE        reduce using rule 65 (if_i -> IF ( expr ) instruction .)
    BREAK           reduce using rule 65 (if_i -> IF ( expr ) instruction .)
    PRINT           reduce using rule 65 (if_i -> IF ( expr ) instruction .)
    WHILE           reduce using rule 65 (if_i -> IF ( expr ) instruction .)
    FOR             reduce using rule 65 (if_i -> IF ( expr ) instruction .)
    RETURN          reduce using rule 65 (if_i -> IF ( expr ) instruction .)
    IF              reduce using rule 65 (if_i -> IF ( expr ) instruction .)
    ID              reduce using rule 65 (if_i -> IF ( expr ) instruction .)
    $end            reduce using rule 65 (if_i -> IF ( expr ) instruction .)
    }               reduce using rule 65 (if_i -> IF ( expr ) instruction .)


state 131

    (59) variables -> variables , variable .
    ]               reduce using rule 59 (variables -> variables , variable .)
    ,               reduce using rule 59 (variables -> variables , variable .)


state 132

    (53) vector -> ID [ expr : . ]
    (55) vector -> ID [ expr : . expr ]
    (15) expr -> . mat_fun ( expr )
    (16) expr -> . matrix
    (17) expr -> . unary
    (18) expr -> . expr OR expr
    (19) expr -> . expr AND expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTADD expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . expr DOTMUL expr
    (25) expr -> . expr LESSEREQUAL expr
    (26) expr -> . expr GREATEREQUAL expr
    (27) expr -> . expr LESSER expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr NOTEQUAL expr
    (30) expr -> . expr EQUAL expr
    (31) expr -> . expr / expr
    (32) expr -> . expr * expr
    (33) expr -> . expr - expr
    (34) expr -> . expr + expr
    (35) expr -> . ( expr )
    (36) expr -> . var
    (37) expr -> . FLOATNUM
    (38) expr -> . INTNUM
    (39) expr -> . STRING
    (61) mat_fun -> . ONES
    (62) mat_fun -> . EYE
    (63) mat_fun -> . ZEROS
    (50) matrix -> . [ vectors ]
    (48) unary -> . NOT expr
    (49) unary -> . - expr
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    ]               shift and go to state 139
    (               shift and go to state 32
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 38
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    [               shift and go to state 43
    NOT             shift and go to state 44
    -               shift and go to state 35
    ID              shift and go to state 18

    expr                           shift and go to state 138
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    unary                          shift and go to state 34
    var                            shift and go to state 36
    matel                          shift and go to state 21

state 133

    (56) vector -> ID [ expr ] .
    ]               reduce using rule 56 (vector -> ID [ expr ] .)
    ,               reduce using rule 56 (vector -> ID [ expr ] .)


state 134

    (54) vector -> ID [ : expr . ]
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ]               shift and go to state 140
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    LESSEREQUAL     shift and go to state 64
    GREATEREQUAL    shift and go to state 65
    LESSER          shift and go to state 66
    GREATER         shift and go to state 67
    NOTEQUAL        shift and go to state 68
    EQUAL           shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 135

    (67) for_l -> FOR ID = expr : expr . instruction
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    (6) instruction -> . { instructions }
    (7) instruction -> . print_i ;
    (8) instruction -> . assign ;
    (9) instruction -> . while_l
    (10) instruction -> . for_l
    (11) instruction -> . CONTINUE ;
    (12) instruction -> . BREAK ;
    (13) instruction -> . return_i ;
    (14) instruction -> . if_i
    (70) print_i -> . PRINT printargs
    (43) assign -> . var DIVASSIGN expr
    (44) assign -> . var MULASSIGN expr
    (45) assign -> . var SUBASSIGN expr
    (46) assign -> . var ADDASSIGN expr
    (47) assign -> . var = expr
    (66) while_l -> . WHILE ( expr ) instruction
    (67) for_l -> . FOR ID = expr : expr instruction
    (68) return_i -> . RETURN expr
    (69) return_i -> . RETURN
    (64) if_i -> . IF ( expr ) instruction ELSE instruction
    (65) if_i -> . IF ( expr ) instruction
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    LESSEREQUAL     shift and go to state 64
    GREATEREQUAL    shift and go to state 65
    LESSER          shift and go to state 66
    GREATER         shift and go to state 67
    NOTEQUAL        shift and go to state 68
    EQUAL           shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    {               shift and go to state 5
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    PRINT           shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    RETURN          shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 18

    instruction                    shift and go to state 141
    print_i                        shift and go to state 6
    assign                         shift and go to state 7
    while_l                        shift and go to state 8
    for_l                          shift and go to state 9
    return_i                       shift and go to state 12
    if_i                           shift and go to state 13
    var                            shift and go to state 15
    matel                          shift and go to state 21

state 136

    (42) matel -> ID [ expr , expr ] .
    DIVASSIGN       reduce using rule 42 (matel -> ID [ expr , expr ] .)
    MULASSIGN       reduce using rule 42 (matel -> ID [ expr , expr ] .)
    SUBASSIGN       reduce using rule 42 (matel -> ID [ expr , expr ] .)
    ADDASSIGN       reduce using rule 42 (matel -> ID [ expr , expr ] .)
    =               reduce using rule 42 (matel -> ID [ expr , expr ] .)
    ,               reduce using rule 42 (matel -> ID [ expr , expr ] .)
    OR              reduce using rule 42 (matel -> ID [ expr , expr ] .)
    AND             reduce using rule 42 (matel -> ID [ expr , expr ] .)
    XOR             reduce using rule 42 (matel -> ID [ expr , expr ] .)
    DOTSUB          reduce using rule 42 (matel -> ID [ expr , expr ] .)
    DOTADD          reduce using rule 42 (matel -> ID [ expr , expr ] .)
    DOTDIV          reduce using rule 42 (matel -> ID [ expr , expr ] .)
    DOTMUL          reduce using rule 42 (matel -> ID [ expr , expr ] .)
    LESSEREQUAL     reduce using rule 42 (matel -> ID [ expr , expr ] .)
    GREATEREQUAL    reduce using rule 42 (matel -> ID [ expr , expr ] .)
    LESSER          reduce using rule 42 (matel -> ID [ expr , expr ] .)
    GREATER         reduce using rule 42 (matel -> ID [ expr , expr ] .)
    NOTEQUAL        reduce using rule 42 (matel -> ID [ expr , expr ] .)
    EQUAL           reduce using rule 42 (matel -> ID [ expr , expr ] .)
    /               reduce using rule 42 (matel -> ID [ expr , expr ] .)
    *               reduce using rule 42 (matel -> ID [ expr , expr ] .)
    -               reduce using rule 42 (matel -> ID [ expr , expr ] .)
    +               reduce using rule 42 (matel -> ID [ expr , expr ] .)
    ;               reduce using rule 42 (matel -> ID [ expr , expr ] .)
    )               reduce using rule 42 (matel -> ID [ expr , expr ] .)
    ]               reduce using rule 42 (matel -> ID [ expr , expr ] .)
    :               reduce using rule 42 (matel -> ID [ expr , expr ] .)
    {               reduce using rule 42 (matel -> ID [ expr , expr ] .)
    CONTINUE        reduce using rule 42 (matel -> ID [ expr , expr ] .)
    BREAK           reduce using rule 42 (matel -> ID [ expr , expr ] .)
    PRINT           reduce using rule 42 (matel -> ID [ expr , expr ] .)
    WHILE           reduce using rule 42 (matel -> ID [ expr , expr ] .)
    FOR             reduce using rule 42 (matel -> ID [ expr , expr ] .)
    RETURN          reduce using rule 42 (matel -> ID [ expr , expr ] .)
    IF              reduce using rule 42 (matel -> ID [ expr , expr ] .)
    ID              reduce using rule 42 (matel -> ID [ expr , expr ] .)


state 137

    (64) if_i -> IF ( expr ) instruction ELSE . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . print_i ;
    (8) instruction -> . assign ;
    (9) instruction -> . while_l
    (10) instruction -> . for_l
    (11) instruction -> . CONTINUE ;
    (12) instruction -> . BREAK ;
    (13) instruction -> . return_i ;
    (14) instruction -> . if_i
    (70) print_i -> . PRINT printargs
    (43) assign -> . var DIVASSIGN expr
    (44) assign -> . var MULASSIGN expr
    (45) assign -> . var SUBASSIGN expr
    (46) assign -> . var ADDASSIGN expr
    (47) assign -> . var = expr
    (66) while_l -> . WHILE ( expr ) instruction
    (67) for_l -> . FOR ID = expr : expr instruction
    (68) return_i -> . RETURN expr
    (69) return_i -> . RETURN
    (64) if_i -> . IF ( expr ) instruction ELSE instruction
    (65) if_i -> . IF ( expr ) instruction
    (40) var -> . ID
    (41) var -> . matel
    (42) matel -> . ID [ expr , expr ]
    {               shift and go to state 5
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    PRINT           shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    RETURN          shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 18

    instruction                    shift and go to state 142
    print_i                        shift and go to state 6
    assign                         shift and go to state 7
    while_l                        shift and go to state 8
    for_l                          shift and go to state 9
    return_i                       shift and go to state 12
    if_i                           shift and go to state 13
    var                            shift and go to state 15
    matel                          shift and go to state 21

state 138

    (55) vector -> ID [ expr : expr . ]
    (18) expr -> expr . OR expr
    (19) expr -> expr . AND expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTADD expr
    (23) expr -> expr . DOTDIV expr
    (24) expr -> expr . DOTMUL expr
    (25) expr -> expr . LESSEREQUAL expr
    (26) expr -> expr . GREATEREQUAL expr
    (27) expr -> expr . LESSER expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . NOTEQUAL expr
    (30) expr -> expr . EQUAL expr
    (31) expr -> expr . / expr
    (32) expr -> expr . * expr
    (33) expr -> expr . - expr
    (34) expr -> expr . + expr
    ]               shift and go to state 143
    OR              shift and go to state 57
    AND             shift and go to state 58
    XOR             shift and go to state 59
    DOTSUB          shift and go to state 60
    DOTADD          shift and go to state 61
    DOTDIV          shift and go to state 62
    DOTMUL          shift and go to state 63
    LESSEREQUAL     shift and go to state 64
    GREATEREQUAL    shift and go to state 65
    LESSER          shift and go to state 66
    GREATER         shift and go to state 67
    NOTEQUAL        shift and go to state 68
    EQUAL           shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73


state 139

    (53) vector -> ID [ expr : ] .
    ]               reduce using rule 53 (vector -> ID [ expr : ] .)
    ,               reduce using rule 53 (vector -> ID [ expr : ] .)


state 140

    (54) vector -> ID [ : expr ] .
    ]               reduce using rule 54 (vector -> ID [ : expr ] .)
    ,               reduce using rule 54 (vector -> ID [ : expr ] .)


state 141

    (67) for_l -> FOR ID = expr : expr instruction .
    {               reduce using rule 67 (for_l -> FOR ID = expr : expr instruction .)
    CONTINUE        reduce using rule 67 (for_l -> FOR ID = expr : expr instruction .)
    BREAK           reduce using rule 67 (for_l -> FOR ID = expr : expr instruction .)
    PRINT           reduce using rule 67 (for_l -> FOR ID = expr : expr instruction .)
    WHILE           reduce using rule 67 (for_l -> FOR ID = expr : expr instruction .)
    FOR             reduce using rule 67 (for_l -> FOR ID = expr : expr instruction .)
    RETURN          reduce using rule 67 (for_l -> FOR ID = expr : expr instruction .)
    IF              reduce using rule 67 (for_l -> FOR ID = expr : expr instruction .)
    ID              reduce using rule 67 (for_l -> FOR ID = expr : expr instruction .)
    $end            reduce using rule 67 (for_l -> FOR ID = expr : expr instruction .)
    }               reduce using rule 67 (for_l -> FOR ID = expr : expr instruction .)
    ELSE            reduce using rule 67 (for_l -> FOR ID = expr : expr instruction .)


state 142

    (64) if_i -> IF ( expr ) instruction ELSE instruction .
    {               reduce using rule 64 (if_i -> IF ( expr ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 64 (if_i -> IF ( expr ) instruction ELSE instruction .)
    BREAK           reduce using rule 64 (if_i -> IF ( expr ) instruction ELSE instruction .)
    PRINT           reduce using rule 64 (if_i -> IF ( expr ) instruction ELSE instruction .)
    WHILE           reduce using rule 64 (if_i -> IF ( expr ) instruction ELSE instruction .)
    FOR             reduce using rule 64 (if_i -> IF ( expr ) instruction ELSE instruction .)
    RETURN          reduce using rule 64 (if_i -> IF ( expr ) instruction ELSE instruction .)
    IF              reduce using rule 64 (if_i -> IF ( expr ) instruction ELSE instruction .)
    ID              reduce using rule 64 (if_i -> IF ( expr ) instruction ELSE instruction .)
    $end            reduce using rule 64 (if_i -> IF ( expr ) instruction ELSE instruction .)
    }               reduce using rule 64 (if_i -> IF ( expr ) instruction ELSE instruction .)
    ELSE            reduce using rule 64 (if_i -> IF ( expr ) instruction ELSE instruction .)


state 143

    (55) vector -> ID [ expr : expr ] .
    ]               reduce using rule 55 (vector -> ID [ expr : expr ] .)
    ,               reduce using rule 55 (vector -> ID [ expr : expr ] .)
